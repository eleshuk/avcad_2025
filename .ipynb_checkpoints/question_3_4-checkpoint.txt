import pandas as pd
from sklearn.preprocessing import MinMaxScaler
from scipy import stats
import statsmodels.api as sm
from statsmodels.formula.api import ols

# Download the file first
!wget https://raw.githubusercontent.com/jinshijian/SoilHealthDB/master/data/SoilHealthDB_V2.csv

# Read the downloaded CSV file
df = pd.read_csv('SoilHealthDB_V2.csv', encoding='latin-1')

# Display the first few rows to verify
print(df.head())

# Create the new dataframe with the specified columns
df_subset = df[[
    'SoilFamily',
    'GrainCropGroup',
    'CoverCropGroup',
    'Yield_C',
    'Yield_T'
]]

# Display the first few rows of the new dataframe
print(df_subset.head())
# Display info about the new dataframe to check for missing values and data types
print(df_subset.info())

# Remove rows where SoilFamily or GrainCrop is missing
df_subset = df_subset.dropna(subset=['SoilFamily', 'GrainCropGroup', 'Yield_C', 'Yield_T'])

# Display info about the cleaned dataframe to check for missing values
print(df_subset.info())

# Separate the dataframe into two based on yield type
df_T = df_subset.copy()
df_C = df_subset.copy()

# Rename columns to have '_T' and '_C' suffixes
df_T = df_T.rename(columns={'Yield_T': 'Yield'})
df_C = df_C.rename(columns={'Yield_C': 'Yield'})

# Add a new column 'Treatment' to identify the source
df_T['Treatment'] = '_T'
df_C['Treatment'] = '_C'

# Set 'CoverCropGroup' to 'None' for '_C' records
df_C['CoverCropGroup'] = 'None'

# Drop the original yield columns that are no longer needed
df_T = df_T.drop(columns=['Yield_C'])
df_C = df_C.drop(columns=['Yield_T'])

# Concatenate the two dataframes back together
df_subset = pd.concat([df_T, df_C], ignore_index=True)

# Display the first few rows of the combined dataframe
print(df_subset.head())

# Display info about the combined dataframe
print(df_subset.info())

print(df_subset['GrainCropGroup'].unique())

# df_combined['GrainCropGroup'] = df_combined['GrainCropGroup'].replace(['Corn', 'Soybean', 'Wheat','Arable'], 'Monoculture')
df_subset['GrainCropGroup'] = df_subset['GrainCropGroup'].replace(['CS','CSO'], 'Corn-soybean')
df_subset['GrainCropGroup'] = df_subset['GrainCropGroup'].replace('CW', 'Corn-wheat')
df_subset['GrainCropGroup'] = df_subset['GrainCropGroup'].replace( 'CO', 'Corn-oat')
df_subset['GrainCropGroup'] = df_subset['GrainCropGroup'].replace('WO', 'Wheat-oat')
df_subset['GrainCropGroup'] = df_subset['GrainCropGroup'].replace('CWO', 'Corn-wheat-millet')
df_subset['GrainCropGroup'] = df_subset['GrainCropGroup'].replace('CSW', 'Corn-soybean-wheat')
df_subset['GrainCropGroup'] = df_subset['GrainCropGroup'].replace(['AVG','Other'], 'Unknown')
df_subset['GrainCropGroup'] = df_subset['GrainCropGroup'].replace(['CV','CVO', 'WV'], 'Vegetable')
df_subset = df_subset[df_subset['GrainCropGroup'] != 'MTT']


print(df_subset['GrainCropGroup'].unique())

# Initialize the MinMaxScaler
scaler = MinMaxScaler()

# Apply the scaler to the 'Yield' column
df_subset['Yield_scaled'] = scaler.fit_transform(df_subset[['Yield']])

# Display the first few rows with the new scaled column
print(df_subset.head())

# Display info to check the new column
print(df_subset.info())

yield_summary = df_subset.groupby("GrainCropGroup")["Yield"].describe()
display(yield_summary)

# Identify rows with non-null 'Yield'
df_subset_with_yield = df_subset.dropna(subset=['Yield'])

top8_soil = df_subset_with_yield['SoilFamily'].value_counts().nlargest(8).index.tolist()

# Create a new dataframe containing only records from the top 8 soil families
df_top8_soil = df_subset_with_yield[df_subset_with_yield['SoilFamily'].isin(top8_soil)].copy()

# Display info about the new dataframe
print(df_top8_soil.info())
print(df_top8_soil['SoilFamily'].unique())

import seaborn as sns
import matplotlib.pyplot as plt

# Create a pivot table to count the occurrences of each GrainCropGroup within each SoilFamily
soil_crop_counts = df_top8_soil.pivot_table(index='SoilFamily', columns='GrainCropGroup', aggfunc='size', fill_value=0)

# Plot the heatmap
plt.figure(figsize=(12, 8))
sns.heatmap(soil_crop_counts, annot=True, fmt='d', cmap='viridis')
plt.title('Relationship between SoilFamily and GrainCropGroup (Top 8 Soil Families)')
plt.xlabel('Grain Crop Group')
plt.ylabel('Soil Family')
plt.xticks(rotation=45, ha='right')
plt.yticks(rotation=0)
plt.tight_layout()
plt.show()

print(df_top8_soil['SoilFamily'].unique())

# Aggregate the yield data for each SoilFamily and GrainCropGroup combination
soil_crop_yield = df_top8_soil.groupby(['SoilFamily', 'GrainCropGroup'])['Yield'].mean().reset_index()

# Create a bar plot
plt.figure(figsize=(14, 8))
sns.barplot(data=soil_crop_yield, x='SoilFamily', y='Yield', hue='GrainCropGroup', palette='viridis')
plt.title('Average Yield per Soil Family and Grain Crop Group')
plt.xlabel('Soil Family')
plt.ylabel('Average Yield (kg/hm2)')
plt.xticks(rotation=45, ha='right')
plt.legend(title='Grain Crop Group', bbox_to_anchor=(1.05, 1), loc='upper left')
plt.tight_layout()
plt.show()

# Identify SoilFamily with at least two unique GrainCropGroup entries that have non-null 'Yield' data
soil_family_with_multiple_crops = df_subset_with_yield.groupby('SoilFamily')['GrainCropGroup'].nunique()

# Filter for SoilFamily where the number of unique GrainCropGroup is 2 or more
soil_families_with_multiple_yield_crops = soil_family_with_multiple_crops[soil_family_with_multiple_crops >= 3].index.tolist()

print("Soil Families with Yield data for at least two Grain Crop Groups:")
print(soil_families_with_multiple_yield_crops)

# Create a subset of the original dataframe containing only these SoilFamilies
df_soil_multiple_crops = df_subset_with_yield[df_subset_with_yield['SoilFamily'].isin(soil_families_with_multiple_yield_crops)].copy()

print("\nDataFrame subset for Soil Families with multiple crops:")
print(df_soil_multiple_crops.head())
print(df_soil_multiple_crops.info())

df_soil_multiple_crops['SoilFamily'] = df_soil_multiple_crops['SoilFamily'].replace('Canfield silt loam (fine-loamy, mixed mesic Aquic Fragiudalf)', 'Mesic Aquic Fragiudalf')
print(df_soil_multiple_crops['SoilFamily'].unique())

average_yield = df_soil_multiple_crops.groupby(['SoilFamily', 'GrainCropGroup'])['Yield'].mean().reset_index()

# Sort the dataframe by SoilFamily to ensure consistent plotting order
average_yield_sorted = average_yield.sort_values('SoilFamily')

# Create the bar plot
plt.figure(figsize=(16, 9)) # Adjusted figure size for better readability
sns.barplot(data=average_yield_sorted, x='SoilFamily', y='Yield', hue='GrainCropGroup', palette='tab20')

# Set title and labels
plt.title('Average Yield per Soil Family and Grain Crop Group (Soil Families with Multiple Crops)')
plt.xlabel('Soil Family')
plt.ylabel('Average Yield (kg/hm2)')

# Rotate x-axis labels for better readability
plt.xticks(rotation=45, ha='right')

# Add vertical lines to separate soil types
# Get the unique soil families and their positions on the x-axis
unique_soils = average_yield_sorted['SoilFamily'].unique()
# Add lines after each soil type except the last one
for i in range(len(unique_soils) - 1):
    plt.axvline(x=i + 0.5, color='black', linestyle='--', linewidth=1)

# Add a legend
plt.legend(title='Grain Crop Group', bbox_to_anchor=(1.05, 1), loc='upper left')

# Adjust layout to prevent labels from overlapping
plt.tight_layout()

# Show the plot
plt.show()

# Find the top GrainCropGroup for each SoilFamily in df_soil_multiple_crops
top_crops_per_soil = df_soil_multiple_crops.loc[df_soil_multiple_crops.groupby('SoilFamily')['Yield'].idxmax()]

print("\nTop GrainCropGroup for each SoilFamily:")
print(top_crops_per_soil[['SoilFamily', 'GrainCropGroup', 'Yield']])

# Group data by SoilFamily and GrainCropGroup
grouped_yield = df_soil_multiple_crops.groupby(['SoilFamily', 'GrainCropGroup'])['Yield']

# Iterate through each SoilFamily with multiple crops
for soil_family in df_soil_multiple_crops['SoilFamily'].unique():
    print(f"\nAnalyzing SoilFamily: {soil_family}")

    # Get the data for the current SoilFamily
    df_soil = df_soil_multiple_crops[df_soil_multiple_crops['SoilFamily'] == soil_family].copy()

    # Get the top crop for this soil type based on average yield
    top_crop = df_soil.groupby('GrainCropGroup')['Yield'].mean().idxmax()
    print(f"  Top Crop: {top_crop}")

    # Get the yields for the top crop
    yields_top_crop = df_soil[df_soil['GrainCropGroup'] == top_crop]['Yield']

    # Get the yields for all other crops in this soil type
    yields_other_crops = df_soil[df_soil['GrainCropGroup'] != top_crop]['Yield']

    # Perform independent t-test if both groups have enough data
    if len(yields_top_crop) > 1 and len(yields_other_crops) > 1:
        # Before performing t-test, check for equal variances using Levene's test
        # If p-value from Levene's test is < 0.05, assume unequal variances
        try:
            levene_statistic, levene_p_value = stats.levene(yields_top_crop, yields_other_crops)
            equal_var = levene_p_value >= 0.05
            print(f"  Levene's Test p-value: {levene_p_value:.4f} (Assuming equal variances: {equal_var})")

            # Perform t-test
            t_statistic, p_value = stats.ttest_ind(yields_top_crop, yields_other_crops, equal_var=equal_var)

            print(f"  Independent t-test comparing {top_crop} yield to other crop yields:")
            print(f"    T-statistic: {t_statistic:.4f}")
            print(f"    P-value: {p_value:.4f}")

            # Interpret the result
            alpha = 0.05
            if p_value < alpha:
                print(f"    Result: The yield of {top_crop} is significantly different from the yield of other crops in {soil_family} soil (p < {alpha}).")
            else:
                print(f"    Result: There is no statistically significant difference in yield between {top_crop} and other crops in {soil_family} soil (p >= {alpha}).")

        except ValueError as e:
            print(f"  Could not perform t-test for {soil_family}: {e}")
    else:
        print(f"  Not enough data for statistical testing for {soil_family} (need at least 2 samples in each group).")


print(df_soil_multiple_crops['CoverCropGroup'].unique())

df_soil_multiple_crops['CoverCropGroup'] = df_soil_multiple_crops['CoverCropGroup'].replace(['LL', 'Legume_Tree'], 'Legume')
df_soil_multiple_crops['CoverCropGroup'] = df_soil_multiple_crops['CoverCropGroup'].replace(['LG', 'BG', 'AVG', 'MOT'], 'Mixed')
df_soil_multiple_crops['CoverCropGroup'] = df_soil_multiple_crops['CoverCropGroup'].replace('Not_available', 'Unknown')
df_soil_multiple_crops['CoverCropGroup'] = df_soil_multiple_crops['CoverCropGroup'].replace(['No', 'None'], 'No')
df_soil_multiple_crops['CoverCropGroup'] = df_soil_multiple_crops['CoverCropGroup'].replace('BroadleafTree', 'Broadleaf')

print(df_soil_multiple_crops['CoverCropGroup'].unique())

df_soil_multiple_crops = df_soil_multiple_crops.dropna()

print(f"Number of records in df_soil_multiple_crops: {len(df_soil_multiple_crops)}")


# Group the dataframe by SoilFamily and apply the scaler to the 'Yield' column within each group
df_soil_multiple_crops['Scaled_Yield'] = df_soil_multiple_crops.groupby('SoilFamily')['Yield'].transform(lambda x: scaler.fit_transform(x.values.reshape(-1, 1)).flatten())

plt.figure(figsize=(16, 9))
sns.violinplot(data=df_soil_multiple_crops, x='SoilFamily', y='Scaled_Yield', hue='CoverCropGroup', split=True, inner='quart', palette='tab10')

plt.title('Yield Distribution per Soil Family by Cover Crop Group')
plt.xlabel('Soil Family')
plt.ylabel('Scaled Yield')
plt.xticks(rotation=45, ha='right')
plt.legend(title='Cover Crop Group', bbox_to_anchor=(1.05, 1), loc='upper left')
plt.tight_layout()
plt.show()

# Iterate through each unique soil family
for soil_family in df_soil_multiple_crops.SoilFamily.unique():
    # Filter data for the current soil family
    df_soil = df_soil_multiple_crops[df_soil_multiple_crops['SoilFamily'] == soil_family]

    # Check if there is data for this soil family
    if not df_soil.empty:
        plt.figure(figsize=(5, 5))
        sns.boxplot(data=df_soil, x='GrainCropGroup', y='Scaled_Yield', hue='CoverCropGroup', palette='viridis')
        plt.title(f'{soil_family}')
        plt.xlabel('Grain Crop Group')
        plt.ylabel('Yield (scaled)')
        plt.xticks(rotation=45, ha='right')
        plt.legend(title='Cover Crop Group', bbox_to_anchor=(1.05, 1), loc='upper left')
        plt.tight_layout()
        plt.show()
    else:
        print(f"No data available for SoilFamily: {soil_family}")

# Iterate through each unique SoilFamily
for soil_family in df_soil_multiple_crops['SoilFamily'].unique():
    print(f"\nAnalyzing SoilFamily: {soil_family}")

    # Filter data for the current soil family
    df_soil = df_soil_multiple_crops[df_soil_multiple_crops['SoilFamily'] == soil_family].copy()

    # Check if there is data for this soil family
    if not df_soil.empty:
        # Iterate through each unique GrainCropGroup within this soil family
        for grain_crop_group in df_soil['GrainCropGroup'].unique():
            print(f"  Analyzing GrainCropGroup: {grain_crop_group}")

            # Filter data for the current grain crop group within this soil family
            df_grain_crop = df_soil[df_soil['GrainCropGroup'] == grain_crop_group].copy()

            # Check if there are multiple CoverCropGroups to compare
            if df_grain_crop['CoverCropGroup'].nunique() > 1:
                # Get the unique cover crop groups
                cover_crop_groups = df_grain_crop['CoverCropGroup'].unique()

                # Perform pairwise comparisons between cover crop groups using independent t-tests
                for i in range(len(cover_crop_groups)):
                    for j in range(i + 1, len(cover_crop_groups)):
                        group1 = cover_crop_groups[i]
                        group2 = cover_crop_groups[j]

                        yields_group1 = df_grain_crop[df_grain_crop['CoverCropGroup'] == group1]['Scaled_Yield'].dropna()
                        yields_group2 = df_grain_crop[df_grain_crop['CoverCropGroup'] == group2]['Scaled_Yield'].dropna()

                        # Ensure both groups have enough data for a t-test (at least 2 samples)
                        if len(yields_group1) >= 2 and len(yields_group2) >= 2:
                            try:
                                # Perform Levene's test for equal variances
                                levene_stat, levene_p = stats.levene(yields_group1, yields_group2)
                                equal_var = levene_p >= 0.05 # If p >= 0.05, assume equal variances

                                # Perform independent t-test
                                t_stat, p_value = stats.ttest_ind(yields_group1, yields_group2, equal_var=equal_var)

                                print(f"    Comparison between {group1} and {group2}:")
                                print(f"      Levene's Test p-value: {levene_p:.4f} (Assuming equal variances: {equal_var})")
                                print(f"      Independent t-test p-value: {p_value:.4f}")

                                # Interpret the result
                                alpha = 0.05
                                if p_value < alpha:
                                    print(f"      Result: Scaled_Yield is significantly different between {group1} and {group2} (p < {alpha}).")
                                else:
                                    print(f"      Result: There is no statistically significant difference in Scaled_Yield between {group1} and {group2} (p >= {alpha}).")

                            except ValueError as e:
                                print(f"      Could not perform t-test for {group1} vs {group2}: {e}")
                        else:
                            print(f"    Not enough data to compare {group1} and {group2} (need at least 2 samples in each group).")

            elif df_grain_crop['CoverCropGroup'].nunique() == 1:
                 print(f"  Only one CoverCropGroup ('{df_grain_crop['CoverCropGroup'].iloc[0]}') for {grain_crop_group}. Cannot perform comparison.")
            else:
                 print(f"  No CoverCropGroup data available for {grain_crop_group}.")

    else:
        print(f"No data available for SoilFamily: {soil_family}")


# Apply Shapiro-Wilk test to check for normality of Scaled_Yield
# Iterate through each unique SoilFamily and GrainCropGroup combination with sufficient data
for soil_family in df_soil_multiple_crops['SoilFamily'].unique():
    for grain_crop_group in df_soil_multiple_crops[df_soil_multiple_crops['SoilFamily'] == soil_family]['GrainCropGroup'].unique():
        # Filter data for the current combination
        df_combination = df_soil_multiple_crops[(df_soil_multiple_crops['SoilFamily'] == soil_family) & (df_soil_multiple_crops['GrainCropGroup'] == grain_crop_group)].copy()

        # Check if there's enough data (at least 3 samples are generally recommended for Shapiro-Wilk)
        if len(df_combination) >= 3:
            # Get the Scaled_Yield data
            scaled_yield_data = df_combination['Scaled_Yield'].dropna()

            if len(scaled_yield_data) >= 3:
                # Perform Shapiro-Wilk test
                try:
                    shapiro_statistic, shapiro_p_value = stats.shapiro(scaled_yield_data)

                    print(f"\nShapiro-Wilk Test for SoilFamily: {soil_family}, GrainCropGroup: {grain_crop_group}")
                    print(f"  Shapiro-Wilk Statistic: {shapiro_statistic:.4f}")
                    print(f"  P-value: {shapiro_p_value:.4f}")

                    # Interpret the result
                    alpha = 0.05
                    if shapiro_p_value < alpha:
                        print(f"  Result: The Scaled_Yield distribution for this combination is likely not normal (p < {alpha}).")
                    else:
                        print(f"  Result: The Scaled_Yield distribution for this combination is likely normal (p >= {alpha}).")

                except Exception as e:
                    print(f"  Could not perform Shapiro-Wilk test for SoilFamily: {soil_family}, GrainCropGroup: {grain_crop_group}: {e}")
            else:
                print(f"\nNot enough non-null data (need at least 3) for Shapiro-Wilk Test for SoilFamily: {soil_family}, GrainCropGroup: {grain_crop_group}")
        else:
            print(f"\nNot enough data (need at least 3 samples) for Shapiro-Wilk Test for SoilFamily: {soil_family}, GrainCropGroup: {grain_crop_group}")



# Create a new dataframe for correlation analysis
df_correlation = df_soil_multiple_crops[['SoilFamily', 'CoverCropGroup', 'Scaled_Yield']].copy()

# Pivot table for heatmap visualization
# We will calculate the average scaled yield for each combination of SoilFamily and CoverCropGroup
heatmap_data = df_correlation.pivot_table(index='SoilFamily', columns='CoverCropGroup', values='Scaled_Yield', aggfunc='mean')

# Plot the heatmap
plt.figure(figsize=(10, 7))
sns.heatmap(heatmap_data, annot=True, fmt=".2f", cmap='coolwarm', center=0)
plt.title('Average Scaled Yield by Soil Family and Cover Crop Group')
plt.xlabel('Cover Crop Group')
plt.ylabel('Soil Family')
plt.xticks(rotation=45, ha='right')
plt.yticks(rotation=0)
plt.tight_layout()
plt.show()

# Ensure 'CoverCropGroup' and 'Scaled_Yield' columns are present and have no missing values for this analysis
df_subset_anova = df_subset[['CoverCropGroup', 'Yield_scaled']].dropna().copy()

# Perform One-Way ANOVA
# The formula 'Scaled_Yield ~ C(CoverCropGroup)' specifies Scaled_Yield as the dependent variable
# and CoverCropGroup as the independent categorical variable. C() indicates that CoverCropGroup should be treated as categorical.
try:
    model = ols('Yield_scaled ~ C(CoverCropGroup)', data=df_subset_anova).fit()
    anova_table = sm.stats.anova_lm(model, typ=2) # Type 2 ANOVA

    print("\nOne-Way ANOVA: Effect of CoverCropGroup on Yield_scaled (ignoring SoilFamily)")
    print(anova_table)

    # Interpret the ANOVA result
    alpha = 0.05
    p_value = anova_table['PR(>F)'].iloc[0] # Get the p-value for CoverCropGroup

    if p_value < alpha:
        print(f"  Result: The mean scaled yield is significantly different across different CoverCropGroups (p < {alpha}).")
    else:
        print(f"  Result: There is no statistically significant difference in mean scaled yield across different CoverCropGroups (p >= {alpha}).")

except Exception as e:
    print(f"\nCould not perform One-Way ANOVA: {e}")
    print("Please ensure 'CoverCropGroup' is a valid column and 'Scaled_Yield' has been calculated correctly on df_subset.")

# To visualize this, we can use a boxplot or violin plot of Scaled_Yield by CoverCropGroup
plt.figure(figsize=(10, 6))
sns.boxplot(data=df_subset_anova, x='CoverCropGroup', y='Yield_scaled',hue='CoverCropGroup',  palette='viridis')
plt.title('Scaled Yield Distribution by Cover Crop Group (Overall)')
plt.xlabel('Cover Crop Group')
plt.ylabel('Scaled Yield')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

plt.figure(figsize=(10, 6))
sns.violinplot(data=df_subset_anova, x='CoverCropGroup', y='Yield_scaled', hue='CoverCropGroup', palette='viridis', inner='quart')
plt.title('Scaled Yield Distribution by Cover Crop Group (Overall)')
plt.xlabel('Cover Crop Group')
plt.ylabel('Scaled Yield')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

