[
  {
    "objectID": "Deprecated/question1_v1.html",
    "href": "Deprecated/question1_v1.html",
    "title": "Data cleaning",
    "section": "",
    "text": "import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom statsmodels.formula.api import ols\nfrom statsmodels.stats.anova import anova_lm\nfrom statsmodels.stats.multicomp import pairwise_tukeyhsd\nimport warnings\nwarnings.filterwarnings('ignore')\nimport pandas as pd\n\n# Just load the sheet directly as a DataFrame\ndf = pd.read_excel(\"SoilHealthDB_V2.xlsx\", sheet_name='Sheet1')\n\n# Strip whitespace from column names\ndf.columns = df.columns.str.strip()\n\n# Rename for clarity and consistency (only those that exist)\nrename_map = {\n    'CoverCropGroup': 'CoverCropGroup',\n    'Tillage_Top_T': 'Tillage',\n    'Rotation_Top_T': 'Rotation',\n    'GrainCropGroup': 'GrainCropGroup',\n    'Grazing_Top_T': 'Grazing',\n    'SoilBD': 'SoilBD'\n}\ndf = df.rename(columns={k: v for k, v in rename_map.items() if k in df.columns})\n\n# Keep only relevant columns that are present\nneeded_columns = ['CoverCropGroup', 'Tillage', 'Rotation', 'GrainCropGroup', 'Grazing', 'SoilBD']\ndf = df[[col for col in needed_columns if col in df.columns]]\n\n# Drop rows where SoilBD is missing\ndf = df.dropna(subset=['SoilBD'])"
  },
  {
    "objectID": "Deprecated/question1_v1.html#data-exploration",
    "href": "Deprecated/question1_v1.html#data-exploration",
    "title": "Data cleaning",
    "section": "Data exploration",
    "text": "Data exploration\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Define the variables to plot (only those that are present in your DataFrame)\nmanagement_vars = ['CoverCropGroup', 'Tillage', 'GrainCropGroup']\nnum_vars = len(management_vars)\n\n# Set up the figure\nfig, axes = plt.subplots(nrows=1, ncols=num_vars, figsize=(6 * num_vars, 5), constrained_layout=True)\n\n# Plot each variable\nfor i, var in enumerate(management_vars):\n    sns.boxplot(data=df, x=var, y='SoilBD', ax=axes[i])\n    axes[i].set_title(f\"SoilBD by {var}\")\n    axes[i].tick_params(axis='x', rotation=45)\n    axes[i].set_xlabel(\"\")\n    axes[i].set_ylabel(\"Soil Bulk Density\")\n\n# Display the full row of plots\nplt.show()"
  },
  {
    "objectID": "Deprecated/question1_v1.html#one-way-anova-for-soilbd-across-each-management-variable",
    "href": "Deprecated/question1_v1.html#one-way-anova-for-soilbd-across-each-management-variable",
    "title": "Data cleaning",
    "section": "One-way ANOVA for SoilBD across each management variable",
    "text": "One-way ANOVA for SoilBD across each management variable\n\nimport statsmodels.api as sm\nfrom statsmodels.formula.api import ols\nfrom statsmodels.stats.anova import anova_lm\n\nanova_results = {}\n\nfor var in management_vars:\n    if var in df.columns:\n        temp_df = df[[var, 'SoilBD']].dropna()\n        if temp_df[var].nunique() &lt; 2:\n            continue  # Skip if only 1 group\n        model = ols(f\"SoilBD ~ C({var})\", data=temp_df).fit()\n        anova_table = anova_lm(model, typ=2)\n        anova_results[var] = anova_table\n        print(f\"\\nANOVA for SoilBD by {var}:\\n\")\n        print(anova_table)\n\n\nANOVA for SoilBD by CoverCropGroup:\n\n                      sum_sq      df         F   PR(&gt;F)\nC(CoverCropGroup)   1.307715    14.0  2.922223  0.00021\nResidual           50.184713  1570.0       NaN      NaN\n\nANOVA for SoilBD by Tillage:\n\n               sum_sq     df          F        PR(&gt;F)\nC(Tillage)   1.349472    1.0  49.393287  5.046775e-12\nResidual    18.824144  689.0        NaN           NaN\n\nANOVA for SoilBD by GrainCropGroup:\n\n                      sum_sq      df          F        PR(&gt;F)\nC(GrainCropGroup)   5.534108    16.0  11.821218  8.789639e-30\nResidual           48.804678  1668.0        NaN           NaN"
  },
  {
    "objectID": "Deprecated/question1_v1.html#tukey-hsd-post-hoc-tests-for-significant-anovas",
    "href": "Deprecated/question1_v1.html#tukey-hsd-post-hoc-tests-for-significant-anovas",
    "title": "Data cleaning",
    "section": "Tukey HSD Post Hoc Tests for Significant ANOVAs",
    "text": "Tukey HSD Post Hoc Tests for Significant ANOVAs\n\nfrom statsmodels.stats.multicomp import pairwise_tukeyhsd\n\ntukey_results = {}\n\nfor var in management_vars:\n    if var in df.columns:\n        temp_df = df[[var, 'SoilBD']].dropna()\n        if temp_df[var].nunique() &lt; 2:\n            continue\n        model = ols(f\"SoilBD ~ C({var})\", data=temp_df).fit()\n        anova_table = anova_lm(model, typ=2)\n        p_value = anova_table['PR(&gt;F)'][0]\n        \n        if p_value &lt; 0.05:\n            tukey = pairwise_tukeyhsd(endog=temp_df['SoilBD'],\n                                      groups=temp_df[var],\n                                      alpha=0.05)\n            tukey_results[var] = tukey.summary()\n            print(f\"\\nTukey HSD for {var}:\\n\")\n            print(tukey.summary())\n\n\nTukey HSD for CoverCropGroup:\n\n       Multiple Comparison of Means - Tukey HSD, FWER=0.05       \n=================================================================\n    group1        group2    meandiff p-adj   lower  upper  reject\n-----------------------------------------------------------------\n          AVG            BG   -0.011    1.0   -0.43 0.4081  False\n          AVG      Brassica   0.0445    1.0 -0.2053 0.2943  False\n          AVG     Broadleaf   0.0757 0.9999 -0.2236  0.375  False\n          AVG            GG  -0.0543    1.0 -0.7035 0.5949  False\n          AVG         Grass  -0.0516    1.0 -0.2842 0.1809  False\n          AVG            LG   0.0071    1.0 -0.2293 0.2435  False\n          AVG            LL   0.0283    1.0 -0.2367 0.2934  False\n          AVG        Legume   -0.022    1.0 -0.2527 0.2086  False\n          AVG           MOT  -0.1068 0.9929  -0.382 0.1684  False\n          AVG           MTT  -0.2543 0.9923 -0.9035 0.3949  False\n          AVG         Mixed  -0.0457    1.0 -0.3006 0.2092  False\n          AVG            No  -0.1186 0.9962 -0.4432  0.206  False\n          AVG Not_available  -0.0243    1.0 -0.6735 0.6249  False\n          AVG           Rye   0.0147    1.0 -0.2172 0.2465  False\n           BG      Brassica   0.0555    1.0 -0.3087 0.4197  False\n           BG     Broadleaf   0.0867    1.0 -0.3131 0.4864  False\n           BG            GG  -0.0433    1.0 -0.7446 0.6579  False\n           BG         Grass  -0.0407    1.0 -0.3933 0.3119  False\n           BG            LG   0.0181    1.0 -0.3371 0.3732  False\n           BG            LL   0.0393    1.0 -0.3355 0.4141  False\n           BG        Legume  -0.0111    1.0 -0.3624 0.3402  False\n           BG           MOT  -0.0958 0.9999 -0.4779 0.2862  False\n           BG           MTT  -0.2433 0.9978 -0.9446 0.4579  False\n           BG         Mixed  -0.0347    1.0 -0.4025  0.333  False\n           BG            No  -0.1076 0.9999 -0.5267 0.3114  False\n           BG Not_available  -0.0133    1.0 -0.7146 0.6879  False\n           BG           Rye   0.0256    1.0 -0.3265 0.3777  False\n     Brassica     Broadleaf   0.0312    1.0 -0.1846  0.247  False\n     Brassica            GG  -0.0988    1.0  -0.714 0.5164  False\n     Brassica         Grass  -0.0962  0.119 -0.2015 0.0092  False\n     Brassica            LG  -0.0374 0.9987  -0.151 0.0762  False\n     Brassica            LL  -0.0162    1.0 -0.1813 0.1489  False\n     Brassica        Legume  -0.0666 0.6376 -0.1676 0.0345  False\n     Brassica           MOT  -0.1513 0.2267 -0.3323 0.0297  False\n     Brassica           MTT  -0.2988 0.9472  -0.914 0.3164  False\n     Brassica         Mixed  -0.0902 0.7575 -0.2385 0.0581  False\n     Brassica            No  -0.1631 0.6519 -0.4129 0.0867  False\n     Brassica Not_available  -0.0688    1.0  -0.684 0.5464  False\n     Brassica           Rye  -0.0299 0.9997 -0.1336 0.0739  False\n    Broadleaf            GG    -0.13    1.0 -0.7669 0.5069  False\n    Broadleaf         Grass  -0.1274 0.6569  -0.323 0.0683  False\n    Broadleaf            LG  -0.0686  0.998 -0.2688 0.1316  False\n    Broadleaf            LL  -0.0474    1.0 -0.2807 0.1859  False\n    Broadleaf        Legume  -0.0978 0.9279 -0.2911 0.0956  False\n    Broadleaf           MOT  -0.1825 0.4177 -0.4273 0.0623  False\n    Broadleaf           MTT    -0.33 0.9135 -0.9669 0.3069  False\n    Broadleaf         Mixed  -0.1214 0.8727 -0.3432 0.1004  False\n    Broadleaf            No  -0.1943 0.6612 -0.4936  0.105  False\n    Broadleaf Not_available     -0.1    1.0 -0.7369 0.5369  False\n    Broadleaf           Rye  -0.0611 0.9993 -0.2558 0.1337  False\n           GG         Grass   0.0026    1.0 -0.6058 0.6111  False\n           GG            LG   0.0614    1.0 -0.5485 0.6713  False\n           GG            LL   0.0826    1.0  -0.539 0.7042  False\n           GG        Legume   0.0322    1.0 -0.5755 0.6399  False\n           GG           MOT  -0.0525    1.0 -0.6785 0.5735  False\n           GG           MTT     -0.2    1.0 -1.0588 0.6588  False\n           GG         Mixed   0.0086    1.0 -0.6087 0.6259  False\n           GG            No  -0.0643    1.0 -0.7135 0.5849  False\n           GG Not_available     0.03    1.0 -0.8288 0.8888  False\n           GG           Rye   0.0689    1.0 -0.5392 0.6771  False\n        Grass            LG   0.0587 0.1788 -0.0091 0.1266  False\n        Grass            LL     0.08 0.8143 -0.0577 0.2177  False\n        Grass        Legume   0.0296 0.5899 -0.0141 0.0733  False\n        Grass           MOT  -0.0551 0.9973 -0.2115 0.1012  False\n        Grass           MTT  -0.2026 0.9986 -0.8111 0.4058  False\n        Grass         Mixed    0.006    1.0 -0.1111  0.123  False\n        Grass            No  -0.0669 0.9997 -0.2995 0.1656  False\n        Grass Not_available   0.0274    1.0 -0.5811 0.6358  False\n        Grass           Rye   0.0663 0.0006  0.0168 0.1158   True\n           LG            LL   0.0212    1.0 -0.1229 0.1653  False\n           LG        Legume  -0.0292 0.9534 -0.0901 0.0318  False\n           LG           MOT  -0.1139 0.5245 -0.2759 0.0481  False\n           LG           MTT  -0.2614 0.9819 -0.8713 0.3485  False\n           LG         Mixed  -0.0528 0.9836 -0.1773 0.0717  False\n           LG            No  -0.1257  0.896 -0.3621 0.1107  False\n           LG Not_available  -0.0314    1.0 -0.6413 0.5785  False\n           LG           Rye   0.0076    1.0 -0.0577 0.0728  False\n           LL        Legume  -0.0504  0.995 -0.1848 0.0841  False\n           LL           MOT  -0.1351 0.6076 -0.3366 0.0664  False\n           LL           MTT  -0.2826 0.9694 -0.9042  0.339  False\n           LL         Mixed   -0.074  0.982 -0.2468 0.0988  False\n           LL            No  -0.1469 0.8618 -0.4119 0.1181  False\n           LL Not_available  -0.0526    1.0 -0.6742  0.569  False\n           LL           Rye  -0.0137    1.0 -0.1501 0.1228  False\n       Legume           MOT  -0.0847 0.8654 -0.2382 0.0688  False\n       Legume           MTT  -0.2322 0.9939 -0.8399 0.3755  False\n       Legume         Mixed  -0.0236    1.0 -0.1368 0.0895  False\n       Legume            No  -0.0965 0.9854 -0.3272 0.1341  False\n       Legume Not_available  -0.0022    1.0 -0.6099 0.6055  False\n       Legume           Rye   0.0367  0.104 -0.0029 0.0763  False\n          MOT           MTT  -0.1475    1.0 -0.7735 0.4785  False\n          MOT         Mixed   0.0611 0.9989 -0.1269 0.2491  False\n          MOT            No  -0.0118    1.0  -0.287 0.2634  False\n          MOT Not_available   0.0825    1.0 -0.5435 0.7085  False\n          MOT           Rye   0.1214 0.3328 -0.0338 0.2767  False\n          MTT         Mixed   0.2086 0.9983 -0.4087 0.8259  False\n          MTT            No   0.1357    1.0 -0.5135 0.7849  False\n          MTT Not_available     0.23 0.9999 -0.6288 1.0888  False\n          MTT           Rye   0.2689  0.976 -0.3392 0.8771  False\n        Mixed            No  -0.0729 0.9997 -0.3278  0.182  False\n        Mixed Not_available   0.0214    1.0 -0.5959 0.6387  False\n        Mixed           Rye   0.0603 0.9083 -0.0552 0.1759  False\n           No Not_available   0.0943    1.0 -0.5549 0.7435  False\n           No           Rye   0.1332 0.8259 -0.0986 0.3651  False\nNot_available           Rye   0.0389    1.0 -0.5692 0.6471  False\n-----------------------------------------------------------------\n\nTukey HSD for Tillage:\n\nMultiple Comparison of Means - Tukey HSD, FWER=0.05\n===================================================\ngroup1 group2 meandiff p-adj  lower   upper  reject\n---------------------------------------------------\n    CT     NT  -0.0884   0.0 -0.1131 -0.0637   True\n---------------------------------------------------\n\nTukey HSD for GrainCropGroup:\n\n   Multiple Comparison of Means - Tukey HSD, FWER=0.05    \n==========================================================\n  group1    group2  meandiff p-adj   lower   upper  reject\n----------------------------------------------------------\n      AVG    Arable   0.0425 0.9871 -0.0556  0.1407  False\n      AVG        CO   0.0898 0.7657 -0.0554  0.2351  False\n      AVG        CS   0.0349 0.9993  -0.069  0.1387  False\n      AVG       CSW   0.0722 0.9007 -0.0603  0.2047  False\n      AVG        CV   0.0681 0.8539 -0.0504  0.1866  False\n      AVG        CW   0.0931 0.9663 -0.1014  0.2876  False\n      AVG      Corn   0.0049    1.0 -0.0926  0.1025  False\n      AVG       MTT   0.0776 0.9999 -0.2031  0.3583  False\n      AVG     Maize  -0.0894 0.9999 -0.3998   0.221  False\n      AVG   Orchard  -0.1219 0.0125 -0.2311 -0.0126   True\n      AVG     Other  -0.1094 0.9987 -0.4198   0.201  False\n      AVG   Pasture  -0.2644 0.4386 -0.6188    0.09  False\n      AVG   Soybean  -0.0605 0.9266 -0.1758  0.0549  False\n      AVG Vegetable   0.0698 0.5754 -0.0308  0.1705  False\n      AVG        WO   0.2122    0.0  0.0724  0.3519   True\n      AVG     Wheat   0.0504 0.9539 -0.0513  0.1522  False\n   Arable        CO   0.0473 0.9936 -0.0694  0.1639  False\n   Arable        CS  -0.0077    1.0 -0.0651  0.0497  False\n   Arable       CSW   0.0297 0.9999 -0.0707    0.13  False\n   Arable        CV   0.0256 0.9997 -0.0554  0.1065  False\n   Arable        CW   0.0506 0.9999 -0.1236  0.2247  False\n   Arable      Corn  -0.0376 0.2381 -0.0826  0.0074  False\n   Arable       MTT   0.0351    1.0 -0.2319  0.3021  False\n   Arable     Maize  -0.1319 0.9841   -0.43  0.1661  False\n   Arable   Orchard  -0.1644    0.0 -0.2311 -0.0977   True\n   Arable     Other  -0.1519 0.9417   -0.45  0.1461  False\n   Arable   Pasture  -0.3069 0.1463 -0.6506  0.0367  False\n   Arable   Soybean   -0.103 0.0004 -0.1793 -0.0267   True\n   Arable Vegetable   0.0273 0.9175  -0.024  0.0786  False\n   Arable        WO   0.1696    0.0  0.0599  0.2794   True\n   Arable     Wheat   0.0079    1.0 -0.0455  0.0613  False\n       CO        CS  -0.0549 0.9804 -0.1764  0.0665  False\n       CO       CSW  -0.0176    1.0 -0.1644  0.1291  False\n       CO        CV  -0.0217    1.0  -0.156  0.1125  False\n       CO        CW   0.0033    1.0 -0.2011  0.2077  False\n       CO      Corn  -0.0849 0.4778 -0.2011  0.0313  False\n       CO       MTT  -0.0122    1.0 -0.2999  0.2754  False\n       CO     Maize  -0.1792 0.8687 -0.4959  0.1375  False\n       CO   Orchard  -0.2117    0.0 -0.3378 -0.0855   True\n       CO     Other  -0.1992 0.7413 -0.5159  0.1175  False\n       CO   Pasture  -0.3542 0.0595 -0.7142  0.0057  False\n       CO   Soybean  -0.1503 0.0087 -0.2817 -0.0188   True\n       CO Vegetable    -0.02    1.0 -0.1387  0.0988  False\n       CO        WO   0.1224 0.3141  -0.031  0.2757  False\n       CO     Wheat  -0.0394 0.9994  -0.159  0.0803  False\n       CS       CSW   0.0373 0.9987 -0.0686  0.1433  False\n       CS        CV   0.0332  0.997 -0.0546   0.121  False\n       CS        CW   0.0582 0.9995 -0.1192  0.2356  False\n       CS      Corn    -0.03  0.918 -0.0863  0.0264  False\n       CS       MTT   0.0427    1.0 -0.2264  0.3119  False\n       CS     Maize  -0.1243  0.992 -0.4242  0.1757  False\n       CS   Orchard  -0.1567    0.0 -0.2316 -0.0819   True\n       CS     Other  -0.1443 0.9649 -0.4442  0.1557  False\n       CS   Pasture  -0.2993 0.1846 -0.6446   0.046  False\n       CS   Soybean  -0.0953 0.0088 -0.1788 -0.0119   True\n       CS Vegetable    0.035 0.8643 -0.0265  0.0965  False\n       CS        WO   0.1773    0.0  0.0624  0.2922   True\n       CS     Wheat   0.0156    1.0 -0.0477  0.0788  False\n      CSW        CV  -0.0041    1.0 -0.1245  0.1163  False\n      CSW        CW   0.0209    1.0 -0.1747  0.2165  False\n      CSW      Corn  -0.0673  0.628 -0.1671  0.0325  False\n      CSW       MTT   0.0054    1.0  -0.276  0.2869  False\n      CSW     Maize  -0.1616 0.9318 -0.4727  0.1495  False\n      CSW   Orchard  -0.1941    0.0 -0.3053 -0.0828   True\n      CSW     Other  -0.1816 0.8372 -0.4927  0.1295  False\n      CSW   Pasture  -0.3366 0.0865 -0.6916  0.0184  False\n      CSW   Soybean  -0.1327 0.0101 -0.2499 -0.0154   True\n      CSW Vegetable  -0.0024    1.0 -0.1051  0.1004  False\n      CSW        WO     0.14 0.0555 -0.0013  0.2813  False\n      CSW     Wheat  -0.0218    1.0 -0.1256  0.0821  False\n       CV        CW    0.025    1.0 -0.1614  0.2114  False\n       CV      Corn  -0.0632 0.3383 -0.1434  0.0171  False\n       CV       MTT   0.0095    1.0 -0.2656  0.2846  False\n       CV     Maize  -0.1575 0.9357 -0.4629  0.1479  False\n       CV   Orchard    -0.19    0.0 -0.2841 -0.0958   True\n       CV     Other  -0.1775 0.8419 -0.4829  0.1279  False\n       CV   Pasture  -0.3325 0.0849 -0.6825  0.0175  False\n       CV   Soybean  -0.1286 0.0014 -0.2297 -0.0274   True\n       CV Vegetable   0.0017    1.0 -0.0822  0.0857  False\n       CV        WO   0.1441 0.0113  0.0158  0.2724   True\n       CV     Wheat  -0.0177    1.0 -0.1029  0.0676  False\n       CW      Corn  -0.0882 0.9439  -0.262  0.0856  False\n       CW       MTT  -0.0155    1.0 -0.3309  0.2999  False\n       CW     Maize  -0.1825 0.9155 -0.5246  0.1596  False\n       CW   Orchard   -0.215 0.0045 -0.3956 -0.0343   True\n       CW     Other  -0.2025 0.8215 -0.5446  0.1396  False\n       CW   Pasture  -0.3575 0.0989   -0.74   0.025  False\n       CW   Soybean  -0.1536 0.2429  -0.338  0.0308  False\n       CW Vegetable  -0.0233    1.0 -0.1988  0.1523  False\n       CW        WO   0.1191  0.818 -0.0815  0.3196  False\n       CW     Wheat  -0.0427    1.0 -0.2188  0.1335  False\n     Corn       MTT   0.0727    1.0 -0.1941  0.3395  False\n     Corn     Maize  -0.0943 0.9997 -0.3922  0.2035  False\n     Corn   Orchard  -0.1268    0.0 -0.1926  -0.061   True\n     Corn     Other  -0.1143 0.9965 -0.4122  0.1835  False\n     Corn   Pasture  -0.2693 0.3456 -0.6128  0.0742  False\n     Corn   Soybean  -0.0654 0.1853 -0.1409  0.0101  False\n     Corn Vegetable   0.0649  0.001  0.0148  0.1151   True\n     Corn        WO   0.2073    0.0  0.0981  0.3165   True\n     Corn     Wheat   0.0455 0.1789 -0.0068  0.0978  False\n      MTT     Maize   -0.167 0.9907 -0.5645  0.2305  False\n      MTT   Orchard  -0.1995 0.4663 -0.4707  0.0718  False\n      MTT     Other   -0.187 0.9714 -0.5845  0.2105  False\n      MTT   Pasture   -0.342 0.3312 -0.7747  0.0907  False\n      MTT   Soybean  -0.1381 0.9467 -0.4119  0.1357  False\n      MTT Vegetable  -0.0078    1.0 -0.2757  0.2601  False\n      MTT        WO   0.1346 0.9703 -0.1504  0.4195  False\n      MTT     Wheat  -0.0272    1.0 -0.2955  0.2412  False\n    Maize   Orchard  -0.0325    1.0 -0.3344  0.2694  False\n    Maize     Other    -0.02    1.0  -0.439   0.399  False\n    Maize   Pasture   -0.175 0.9962 -0.6275  0.2775  False\n    Maize   Soybean   0.0289    1.0 -0.2752  0.3331  False\n    Maize Vegetable   0.1592 0.9164 -0.1396  0.4581  False\n    Maize        WO   0.3016 0.0768 -0.0126  0.6158  False\n    Maize     Wheat   0.1398 0.9731 -0.1594  0.4391  False\n  Orchard     Other   0.0125    1.0 -0.2894  0.3144  False\n  Orchard   Pasture  -0.1425 0.9927 -0.4895  0.2045  False\n  Orchard   Soybean   0.0614 0.6091 -0.0287  0.1515  False\n  Orchard Vegetable   0.1917    0.0  0.1215   0.262   True\n  Orchard        WO   0.3341    0.0  0.2143  0.4538   True\n  Orchard     Wheat   0.1723    0.0  0.1005  0.2441   True\n    Other   Pasture   -0.155 0.9991 -0.6075  0.2975  False\n    Other   Soybean   0.0489    1.0 -0.2552  0.3531  False\n    Other Vegetable   0.1792 0.8059 -0.1196  0.4781  False\n    Other        WO   0.3216 0.0384  0.0074  0.6358   True\n    Other     Wheat   0.1598 0.9147 -0.1394  0.4591  False\n  Pasture   Soybean   0.2039  0.836  -0.145  0.5529  False\n  Pasture Vegetable   0.3342 0.0686 -0.0101  0.6786  False\n  Pasture        WO   0.4766 0.0005  0.1188  0.8343   True\n  Pasture     Wheat   0.3148 0.1214 -0.0298  0.6595  False\n  Soybean Vegetable   0.1303    0.0  0.0509  0.2097   True\n  Soybean        WO   0.2726    0.0  0.1473   0.398   True\n  Soybean     Wheat   0.1109 0.0003  0.0301  0.1917   True\nVegetable        WO   0.1423 0.0014  0.0304  0.2543   True\nVegetable     Wheat  -0.0194 0.9993 -0.0772  0.0384  False\n       WO     Wheat  -0.1617 0.0001 -0.2747 -0.0488   True\n----------------------------------------------------------\n\n\n\n# Visualize\nfor var in tukey_results.keys():\n    temp_df = df[[var, 'SoilBD']].dropna()\n    plt.figure(figsize=(8, 6))\n    sns.boxplot(data=temp_df, x=var, y='SoilBD')\n    plt.title(f\"Tukey HSD - SoilBD by {var}\")\n    plt.xticks(rotation=45)\n    plt.tight_layout()\n    plt.show()"
  },
  {
    "objectID": "Deprecated/question1_v1.html#stratified-anova-and-boxplots-by-country",
    "href": "Deprecated/question1_v1.html#stratified-anova-and-boxplots-by-country",
    "title": "Data cleaning",
    "section": "Stratified ANOVA and Boxplots by Country",
    "text": "Stratified ANOVA and Boxplots by Country\n\nimport pandas as pd\nfrom statsmodels.formula.api import ols\nfrom statsmodels.stats.anova import anova_lm\n\n# Replace this with the actual path if needed\n# df = pd.read_excel(\"SoilHealthDB_V2.xlsx\")\n\n# Ensure 'Country' and all management_vars exist and are clean\nmanagement_vars = ['CoverCropGroup', 'Tillage', 'Rotation', 'GrainCropGroup', 'Grazing']\ncountries = df['Country'].dropna().unique()\n\nresults = []\n\nfor country in countries:\n    df_country = df[df['Country'] == country]\n    for var in management_vars:\n        if var in df_country.columns:\n            temp_df = df_country[['SoilBD', var]].dropna()\n            if temp_df[var].nunique() &lt; 2:\n                continue  # Skip if only one category present\n            try:\n                model = ols(f'SoilBD ~ C({var})', data=temp_df).fit()\n                anova_table = anova_lm(model, typ=2)\n                f_stat = anova_table['F'][0]\n                p_value = anova_table['PR(&gt;F)'][0]\n                results.append({\n                    'Country': country,\n                    'ManagementVariable': var,\n                    'F-Statistic': round(f_stat, 2),\n                    'p-Value': round(p_value, 4),\n                    'Significant': 'Yes' if p_value &lt; 0.05 else 'No'\n                })\n            except Exception as e:\n                continue  # Skip any models that error\n\n# Create summary table\nanova_summary_table = pd.DataFrame(results)\n\n# Display table\nprint(anova_summary_table)\n\n# Optionally, export to Excel or CSV\n# anova_summary_table.to_csv(\"anova_summary_by_country.csv\", index=False)\n\n\n---------------------------------------------------------------------------\nKeyError                                  Traceback (most recent call last)\nFile /Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/pandas/core/indexes/base.py:3805, in Index.get_loc(self, key)\n   3804 try:\n-&gt; 3805     return self._engine.get_loc(casted_key)\n   3806 except KeyError as err:\n\nFile index.pyx:167, in pandas._libs.index.IndexEngine.get_loc()\n\nFile index.pyx:196, in pandas._libs.index.IndexEngine.get_loc()\n\nFile pandas/_libs/hashtable_class_helper.pxi:7081, in pandas._libs.hashtable.PyObjectHashTable.get_item()\n\nFile pandas/_libs/hashtable_class_helper.pxi:7089, in pandas._libs.hashtable.PyObjectHashTable.get_item()\n\nKeyError: 'Country'\n\nThe above exception was the direct cause of the following exception:\n\nKeyError                                  Traceback (most recent call last)\nCell In[37], line 10\n      5 # Replace this with the actual path if needed\n      6 # df = pd.read_excel(\"SoilHealthDB_V2.xlsx\")\n      7 \n      8 # Ensure 'Country' and all management_vars exist and are clean\n      9 management_vars = ['CoverCropGroup', 'Tillage', 'Rotation', 'GrainCropGroup', 'Grazing']\n---&gt; 10 countries = df['Country'].dropna().unique()\n     12 results = []\n     14 for country in countries:\n\nFile /Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/pandas/core/frame.py:4102, in DataFrame.__getitem__(self, key)\n   4100 if self.columns.nlevels &gt; 1:\n   4101     return self._getitem_multilevel(key)\n-&gt; 4102 indexer = self.columns.get_loc(key)\n   4103 if is_integer(indexer):\n   4104     indexer = [indexer]\n\nFile /Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/pandas/core/indexes/base.py:3812, in Index.get_loc(self, key)\n   3807     if isinstance(casted_key, slice) or (\n   3808         isinstance(casted_key, abc.Iterable)\n   3809         and any(isinstance(x, slice) for x in casted_key)\n   3810     ):\n   3811         raise InvalidIndexError(key)\n-&gt; 3812     raise KeyError(key) from err\n   3813 except TypeError:\n   3814     # If we have a listlike key, _check_indexing_error will raise\n   3815     #  InvalidIndexError. Otherwise we fall through and re-raise\n   3816     #  the TypeError.\n   3817     self._check_indexing_error(key)\n\nKeyError: 'Country'"
  },
  {
    "objectID": "question_3_4.html",
    "href": "question_3_4.html",
    "title": "3. Which crops grow the best in each soil type?",
    "section": "",
    "text": "import pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\nfrom scipy import stats\nimport statsmodels.api as sm\nfrom statsmodels.formula.api import ols\n# Download the file first\n!wget https://raw.githubusercontent.com/jinshijian/SoilHealthDB/master/data/SoilHealthDB_V2.csv\n\n# Read the downloaded CSV file\ndf = pd.read_csv('SoilHealthDB_V2.csv', encoding='latin-1')\n\n# Display the first few rows to verify\nprint(df.head())\n\n--2025-07-11 17:44:54--  https://raw.githubusercontent.com/jinshijian/SoilHealthDB/master/data/SoilHealthDB_V2.csv\nResolving raw.githubusercontent.com (raw.githubusercontent.com)... 185.199.110.133, 185.199.108.133, 185.199.111.133, ...\nConnecting to raw.githubusercontent.com (raw.githubusercontent.com)|185.199.110.133|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 3545298 (3.4M) [application/octet-stream]\nSaving to: ‘SoilHealthDB_V2.csv’\n\nSoilHealthDB_V2.csv 100%[===================&gt;]   3.38M  9.38MB/s    in 0.4s    \n\n2025-07-11 17:44:56 (9.38 MB/s) - ‘SoilHealthDB_V2.csv’ saved [3545298/3545298]\n\n   StudyID ExperimentID Author_F Author_G  YearPublication  SamplingYear  \\\n0        1        1-Jan    Abawi     G.S.             2000           NaN   \n1        1        1-Jan    Abawi     G.S.             2000           NaN   \n2        1        2-Jan    Abawi     G.S.             2000           NaN   \n3        1        1-Jan    Abawi     G.S.             2000           NaN   \n4        1        4-Jan    Abawi     G.S.             2000           NaN   \n\n                Journal SiteInfor Country  Latitude  ...  MBN_C_SD  MBN_T_SD  \\\n0  Applied Soil Ecology  New York     USA     40.71  ...       NaN       NaN   \n1  Applied Soil Ecology  New York     USA     40.71  ...       NaN       NaN   \n2  Applied Soil Ecology  New York     USA     40.71  ...       NaN       NaN   \n3  Applied Soil Ecology  New York     USA     40.71  ...       NaN       NaN   \n4  Applied Soil Ecology  New York     USA     40.71  ...       NaN       NaN   \n\n   38.MBN_Comments  Microelement  SQI  ESS Texture_C             Comments1  \\\n0              NaN           NaN  NaN  NaN       NaN  Root infected by rot   \n1              NaN           NaN  NaN  NaN       NaN  Root infected by rot   \n2              NaN           NaN  NaN  NaN       NaN  Root infected by rot   \n3              NaN           NaN  NaN  NaN       NaN  Root infected by rot   \n4              NaN           NaN  NaN  NaN       NaN  Root infected by rot   \n\n   Comments2 Comments3  \n0        NaN       NaN  \n1        NaN       NaN  \n2        NaN       NaN  \n3        NaN       NaN  \n4        NaN       NaN  \n\n[5 rows x 270 columns]\n\n\n/tmp/ipython-input-2-2313439922.py:5: DtypeWarning: Columns (16,19,20,24,25,52,77,122,150,152,160,192,197,212,232,237,242,247,252,262,265,266) have mixed types. Specify dtype option on import or set low_memory=False.\n  df = pd.read_csv('SoilHealthDB_V2.csv', encoding='latin-1')\nCreate a df of the soil types column, the crop column, and the covercrop column, and crop yield if it exists. Remember the db has two on each row. Conventional and covercrop/organic. Fields to use: - SoilFamily (soil type is missing a lot of data) - GrainCropGroup (as there are so many mixed records where it is unclear if they are grown in rotation or both grown regularly) - CoverCropGroup (as is more important that a cover crop is used, and is difficult to normalise when multiple covercrops are used) - Yield_C, Yield_T: though the units are not always the same. kg/hm2 unless comments say otherwise, so need comments and remove records where not kg/hm2 (or convert, but there aren’t many records of this)\n# Create the new dataframe with the specified columns\ndf_subset = df[[\n    'SoilFamily',\n    'GrainCropGroup',\n    'CoverCropGroup',\n    'Yield_C',\n    'Yield_T'\n]]\n\n# Display the first few rows of the new dataframe\nprint(df_subset.head())\n# Display info about the new dataframe to check for missing values and data types\nprint(df_subset.info())\n\n  SoilFamily GrainCropGroup CoverCropGroup  Yield_C  Yield_T\n0        NaN            MTT         Legume      NaN      NaN\n1        NaN            MTT         Legume      NaN      NaN\n2        NaN            MTT       Brassica   4862.0   3990.0\n3        NaN            MTT         Legume      NaN      NaN\n4        NaN            MTT            Rye      NaN      NaN\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 5907 entries, 0 to 5906\nData columns (total 5 columns):\n #   Column          Non-Null Count  Dtype  \n---  ------          --------------  -----  \n 0   SoilFamily      4258 non-null   object \n 1   GrainCropGroup  5616 non-null   object \n 2   CoverCropGroup  5062 non-null   object \n 3   Yield_C         2382 non-null   float64\n 4   Yield_T         2381 non-null   float64\ndtypes: float64(2), object(3)\nmemory usage: 230.9+ KB\nNone\nAs the questions are about soil type and crop, these fields cannot be null\n# Remove rows where SoilFamily or GrainCrop is missing\ndf_subset = df_subset.dropna(subset=['SoilFamily', 'GrainCropGroup', 'Yield_C', 'Yield_T'])\n\n# Display info about the cleaned dataframe to check for missing values\nprint(df_subset.info())\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nIndex: 1713 entries, 13 to 5906\nData columns (total 5 columns):\n #   Column          Non-Null Count  Dtype  \n---  ------          --------------  -----  \n 0   SoilFamily      1713 non-null   object \n 1   GrainCropGroup  1713 non-null   object \n 2   CoverCropGroup  1652 non-null   object \n 3   Yield_C         1713 non-null   float64\n 4   Yield_T         1713 non-null   float64\ndtypes: float64(2), object(3)\nmemory usage: 80.3+ KB\nNone\n# Separate the dataframe into two based on yield type\ndf_T = df_subset.copy()\ndf_C = df_subset.copy()\n\n# Rename columns to have '_T' and '_C' suffixes\ndf_T = df_T.rename(columns={'Yield_T': 'Yield'})\ndf_C = df_C.rename(columns={'Yield_C': 'Yield'})\n\n# Add a new column 'Treatment' to identify the source\ndf_T['Treatment'] = '_T'\ndf_C['Treatment'] = '_C'\n\n# Set 'CoverCropGroup' to 'None' for '_C' records\ndf_C['CoverCropGroup'] = 'None'\n\n# Drop the original yield columns that are no longer needed\ndf_T = df_T.drop(columns=['Yield_C'])\ndf_C = df_C.drop(columns=['Yield_T'])\n\n# Concatenate the two dataframes back together\ndf_subset = pd.concat([df_T, df_C], ignore_index=True)\n\n# Display the first few rows of the combined dataframe\nprint(df_subset.head())\n\n# Display info about the combined dataframe\nprint(df_subset.info())\n\n   SoilFamily GrainCropGroup CoverCropGroup    Yield Treatment\n0  Haplustoll      Vegetable            Rye  23300.0        _T\n1  Haplustoll      Vegetable          Grass  19800.0        _T\n2  Haplustoll      Vegetable          Grass  19600.0        _T\n3  Haplustoll      Vegetable            Rye  21400.0        _T\n4  Haplustoll      Vegetable          Grass  18000.0        _T\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 3426 entries, 0 to 3425\nData columns (total 5 columns):\n #   Column          Non-Null Count  Dtype  \n---  ------          --------------  -----  \n 0   SoilFamily      3426 non-null   object \n 1   GrainCropGroup  3426 non-null   object \n 2   CoverCropGroup  3365 non-null   object \n 3   Yield           3426 non-null   float64\n 4   Treatment       3426 non-null   object \ndtypes: float64(1), object(4)\nmemory usage: 134.0+ KB\nNone\nclean the grain crop groups\nprint(df_subset['GrainCropGroup'].unique())\n\n['Vegetable' 'Wheat-oat' 'Soybean' 'Sorghum' 'Wheat' 'Corn' 'Corn-oat'\n 'Corn-soybean-wheat' 'Corn-soybean' 'Arable' 'Corn-wheat-millet'\n 'Corn-wheat' 'Maize' 'Orchard' 'Unknown' 'Pasture']\n# df_combined['GrainCropGroup'] = df_combined['GrainCropGroup'].replace(['Corn', 'Soybean', 'Wheat','Arable'], 'Monoculture')\ndf_subset['GrainCropGroup'] = df_subset['GrainCropGroup'].replace(['CS','CSO'], 'Corn-soybean')\ndf_subset['GrainCropGroup'] = df_subset['GrainCropGroup'].replace('CW', 'Corn-wheat')\ndf_subset['GrainCropGroup'] = df_subset['GrainCropGroup'].replace( 'CO', 'Corn-oat')\ndf_subset['GrainCropGroup'] = df_subset['GrainCropGroup'].replace('WO', 'Wheat-oat')\ndf_subset['GrainCropGroup'] = df_subset['GrainCropGroup'].replace('CWO', 'Corn-wheat-millet')\ndf_subset['GrainCropGroup'] = df_subset['GrainCropGroup'].replace('CSW', 'Corn-soybean-wheat')\ndf_subset['GrainCropGroup'] = df_subset['GrainCropGroup'].replace(['AVG','Other'], 'Unknown')\ndf_subset['GrainCropGroup'] = df_subset['GrainCropGroup'].replace(['CV','CVO', 'WV'], 'Vegetable')\ndf_subset = df_subset[df_subset['GrainCropGroup'] != 'MTT']\n\n\nprint(df_subset['GrainCropGroup'].unique())\n\n['Vegetable' 'Soybean' 'Corn' 'Corn-oat' 'Sorghum' 'Corn-soybean'\n 'Corn-soybean-wheat' 'Arable' 'Wheat' 'Wheat-oat' 'Corn-wheat' 'Maize'\n 'Orchard' 'Unknown' 'Pasture']\nNormalise and scale data\n# Initialize the MinMaxScaler\nscaler = MinMaxScaler()\n\n# Apply the scaler to the 'Yield' column\ndf_subset['Yield_scaled'] = scaler.fit_transform(df_subset[['Yield']])\n\n# Display the first few rows with the new scaled column\nprint(df_subset.head())\n\n# Display info to check the new column\nprint(df_subset.info())\n\n   SoilFamily GrainCropGroup CoverCropGroup    Yield Treatment  Yield_scaled\n0  Haplustoll      Vegetable            Rye  23300.0        _T      0.250537\n1  Haplustoll      Vegetable          Grass  19800.0        _T      0.212903\n2  Haplustoll      Vegetable          Grass  19600.0        _T      0.210752\n3  Haplustoll      Vegetable            Rye  21400.0        _T      0.230107\n4  Haplustoll      Vegetable          Grass  18000.0        _T      0.193548\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nIndex: 3404 entries, 0 to 3425\nData columns (total 6 columns):\n #   Column          Non-Null Count  Dtype  \n---  ------          --------------  -----  \n 0   SoilFamily      3404 non-null   object \n 1   GrainCropGroup  3404 non-null   object \n 2   CoverCropGroup  3343 non-null   object \n 3   Yield           3404 non-null   float64\n 4   Treatment       3404 non-null   object \n 5   Yield_scaled    3404 non-null   float64\ndtypes: float64(2), object(4)\nmemory usage: 186.2+ KB\nNone\nThere are a lot of soil types, so to simplify, the eight soil types with the most data will be visualised. It would be good to group the soil and ananlyse it, but a greater knowledge of soil types is needed.\nyield_summary = df_subset.groupby(\"GrainCropGroup\")[\"Yield\"].describe()\ndisplay(yield_summary)\n\n\n  \n    \n\n\n\n\n\n\ncount\nmean\nstd\nmin\n25%\n50%\n75%\nmax\n\n\nGrainCropGroup\n\n\n\n\n\n\n\n\n\n\n\n\nArable\n306.0\n2509.983660\n2269.252545\n231.000\n970.75000\n2151.5000\n2994.25000\n13300.000\n\n\nCorn\n1836.0\n2994.914352\n2752.843685\n1.910\n1300.00000\n2257.0000\n3666.25000\n19610.000\n\n\nCorn-oat\n82.0\n7220.219512\n2391.680560\n1260.000\n6701.00000\n7471.0000\n8826.00000\n10843.000\n\n\nCorn-soybean\n44.0\n6702.272727\n4099.148445\n1700.000\n2700.00000\n5400.0000\n9925.00000\n13300.000\n\n\nCorn-soybean-wheat\n6.0\n9305.555667\n167.590156\n9066.667\n9186.11075\n9355.5555\n9433.33375\n9466.667\n\n\nCorn-wheat\n2.0\n13300.000000\n212.132034\n13150.000\n13225.00000\n13300.0000\n13375.00000\n13450.000\n\n\nMaize\n38.0\n2410.157895\n2368.133151\n152.000\n455.00000\n1605.0000\n3776.50000\n7642.000\n\n\nOrchard\n42.0\n21847.630714\n17405.807204\n0.080\n13093.75000\n18950.0000\n23925.00000\n72000.000\n\n\nPasture\n4.0\n4425.595000\n3274.644370\n852.380\n2215.59500\n4365.0000\n6575.00000\n8120.000\n\n\nSorghum\n72.0\n3806.111111\n1170.539247\n1980.000\n2870.00000\n3515.0000\n4730.00000\n7140.000\n\n\nSoybean\n158.0\n2738.524241\n2122.808791\n810.000\n1882.50000\n2260.0000\n3257.50000\n12300.000\n\n\nUnknown\n94.0\n5566.454894\n3778.772151\n89.970\n2675.00000\n5350.0000\n7710.00000\n14030.000\n\n\nVegetable\n512.0\n15054.136719\n20615.560454\n3.000\n1440.00000\n6300.0000\n19225.00000\n93000.000\n\n\nWheat\n198.0\n3295.323232\n2614.508288\n407.000\n2290.75000\n2701.5000\n3480.00000\n15700.000\n\n\nWheat-oat\n10.0\n3828.000000\n1207.530078\n1510.000\n3952.50000\n4305.0000\n4467.50000\n4830.000\n# Identify rows with non-null 'Yield'\ndf_subset_with_yield = df_subset.dropna(subset=['Yield'])\n\ntop8_soil = df_subset_with_yield['SoilFamily'].value_counts().nlargest(8).index.tolist()\n\n# Create a new dataframe containing only records from the top 8 soil families\ndf_top8_soil = df_subset_with_yield[df_subset_with_yield['SoilFamily'].isin(top8_soil)].copy()\n\n# Display info about the new dataframe\nprint(df_top8_soil.info())\nprint(df_top8_soil['SoilFamily'].unique())\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nIndex: 1270 entries, 0 to 3207\nData columns (total 6 columns):\n #   Column          Non-Null Count  Dtype  \n---  ------          --------------  -----  \n 0   SoilFamily      1270 non-null   object \n 1   GrainCropGroup  1270 non-null   object \n 2   CoverCropGroup  1270 non-null   object \n 3   Yield           1270 non-null   float64\n 4   Treatment       1270 non-null   object \n 5   Yield_scaled    1270 non-null   float64\ndtypes: float64(2), object(4)\nmemory usage: 69.5+ KB\nNone\n['Haplustoll' 'Typic Hapludulfs'\n 'Clayey, skeletal, kaolinitic, isohyperthermic oxic paleustalf'\n 'Oxic Hapleustalf' 'Ferric Luvisol (FAO)' 'Orthic Ferralsols (FAO)'\n 'Ferric luviso!s' 'AlÞsols']\nThese eight soil types encompass more than a fifth of the records.\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Create a pivot table to count the occurrences of each GrainCropGroup within each SoilFamily\nsoil_crop_counts = df_top8_soil.pivot_table(index='SoilFamily', columns='GrainCropGroup', aggfunc='size', fill_value=0)\n\n# Plot the heatmap\nplt.figure(figsize=(12, 8))\nsns.heatmap(soil_crop_counts, annot=True, fmt='d', cmap='viridis')\nplt.title('Relationship between SoilFamily and GrainCropGroup (Top 8 Soil Families)')\nplt.xlabel('Grain Crop Group')\nplt.ylabel('Soil Family')\nplt.xticks(rotation=45, ha='right')\nplt.yticks(rotation=0)\nplt.tight_layout()\nplt.show()\nThe ‘best’ in this question has been decided as the highest yield, therefore a new df with no null yield values must be created, and then the highest yielding crop for each of the top 8 soil types will be chosen. Some only have one crop group, so this will also be the highest yielding.\nprint(df_top8_soil['SoilFamily'].unique())\n\n['Haplustoll' 'Typic Hapludulfs'\n 'Clayey, skeletal, kaolinitic, isohyperthermic oxic paleustalf'\n 'Oxic Hapleustalf' 'Ferric Luvisol (FAO)' 'Orthic Ferralsols (FAO)'\n 'Ferric luviso!s' 'AlÞsols']\n# Aggregate the yield data for each SoilFamily and GrainCropGroup combination\nsoil_crop_yield = df_top8_soil.groupby(['SoilFamily', 'GrainCropGroup'])['Yield'].mean().reset_index()\n\n# Create a bar plot\nplt.figure(figsize=(14, 8))\nsns.barplot(data=soil_crop_yield, x='SoilFamily', y='Yield', hue='GrainCropGroup', palette='viridis')\nplt.title('Average Yield per Soil Family and Grain Crop Group')\nplt.xlabel('Soil Family')\nplt.ylabel('Average Yield (kg/hm2)')\nplt.xticks(rotation=45, ha='right')\nplt.legend(title='Grain Crop Group', bbox_to_anchor=(1.05, 1), loc='upper left')\nplt.tight_layout()\nplt.show()\nThere are several issues here, most soil types don’t have more than one crop type, which means we can’t determine the best, as there is nothing to compare them to. Secondly Haplustoll has a much higher yield than most, which could be from bad data (it could be recorded in other units), or could be using a high intensity technique, such as vertical farming or greenhouses, which doesn’t necessarily mean Haplustoll soil is this good for growing vegetables in.\nIt is better to use soil types which have data on three or more Grain crop groups, to be able to compare them.\n# Identify SoilFamily with at least two unique GrainCropGroup entries that have non-null 'Yield' data\nsoil_family_with_multiple_crops = df_subset_with_yield.groupby('SoilFamily')['GrainCropGroup'].nunique()\n\n# Filter for SoilFamily where the number of unique GrainCropGroup is 2 or more\nsoil_families_with_multiple_yield_crops = soil_family_with_multiple_crops[soil_family_with_multiple_crops &gt;= 3].index.tolist()\n\nprint(\"Soil Families with Yield data for at least two Grain Crop Groups:\")\nprint(soil_families_with_multiple_yield_crops)\n\n# Create a subset of the original dataframe containing only these SoilFamilies\ndf_soil_multiple_crops = df_subset_with_yield[df_subset_with_yield['SoilFamily'].isin(soil_families_with_multiple_yield_crops)].copy()\n\nprint(\"\\nDataFrame subset for Soil Families with multiple crops:\")\nprint(df_soil_multiple_crops.head())\nprint(df_soil_multiple_crops.info())\n\nSoil Families with Yield data for at least two Grain Crop Groups:\n['Canfield silt loam (fine-loamy, mixed mesic Aquic Fragiudalf)', 'Dystric cambisol on granite bedrock', 'Haplic Luvisols', 'Haplic luvisol on calcareous bedrock', 'Mesic Vertic Epiaqualf', 'Typic Hapludult']\n\nDataFrame subset for Soil Families with multiple crops:\n                                            SoilFamily GrainCropGroup  \\\n440  Canfield silt loam (fine-loamy, mixed mesic Aq...           Corn   \n441  Canfield silt loam (fine-loamy, mixed mesic Aq...           Corn   \n442  Canfield silt loam (fine-loamy, mixed mesic Aq...           Corn   \n443  Canfield silt loam (fine-loamy, mixed mesic Aq...           Corn   \n444  Canfield silt loam (fine-loamy, mixed mesic Aq...        Soybean   \n\n    CoverCropGroup    Yield Treatment  Yield_scaled  \n440            Rye  11100.0        _T      0.119354  \n441            Rye   6700.0        _T      0.072042  \n442            Rye  10100.0        _T      0.108601  \n443            Rye   8900.0        _T      0.095698  \n444            Rye  12100.0        _T      0.130107  \n&lt;class 'pandas.core.frame.DataFrame'&gt;\nIndex: 214 entries, 440 to 3390\nData columns (total 6 columns):\n #   Column          Non-Null Count  Dtype  \n---  ------          --------------  -----  \n 0   SoilFamily      214 non-null    object \n 1   GrainCropGroup  214 non-null    object \n 2   CoverCropGroup  180 non-null    object \n 3   Yield           214 non-null    float64\n 4   Treatment       214 non-null    object \n 5   Yield_scaled    214 non-null    float64\ndtypes: float64(2), object(4)\nmemory usage: 11.7+ KB\nNone\ndf_soil_multiple_crops['SoilFamily'] = df_soil_multiple_crops['SoilFamily'].replace('Canfield silt loam (fine-loamy, mixed mesic Aquic Fragiudalf)', 'Mesic Aquic Fragiudalf')\nprint(df_soil_multiple_crops['SoilFamily'].unique())\n\n['Mesic Aquic Fragiudalf' 'Dystric cambisol on granite bedrock'\n 'Haplic luvisol on calcareous bedrock' 'Mesic Vertic Epiaqualf'\n 'Haplic Luvisols' 'Typic Hapludult']"
  },
  {
    "objectID": "question_3_4.html#does-the-type-of-cover-crop-chosen-affect-the-answer-for-q3",
    "href": "question_3_4.html#does-the-type-of-cover-crop-chosen-affect-the-answer-for-q3",
    "title": "3. Which crops grow the best in each soil type?",
    "section": "4.Does the type of cover crop chosen affect the answer for Q3?",
    "text": "4.Does the type of cover crop chosen affect the answer for Q3?\nClean each column - make sure there are not duplicate fields\n\nprint(df_soil_multiple_crops['CoverCropGroup'].unique())\n\n['Rye' 'Brassica' 'No' 'Mixed']\n\n\n\ndf_soil_multiple_crops['CoverCropGroup'] = df_soil_multiple_crops['CoverCropGroup'].replace(['LL', 'Legume_Tree'], 'Legume')\ndf_soil_multiple_crops['CoverCropGroup'] = df_soil_multiple_crops['CoverCropGroup'].replace(['LG', 'BG', 'AVG', 'MOT'], 'Mixed')\ndf_soil_multiple_crops['CoverCropGroup'] = df_soil_multiple_crops['CoverCropGroup'].replace('Not_available', 'Unknown')\ndf_soil_multiple_crops['CoverCropGroup'] = df_soil_multiple_crops['CoverCropGroup'].replace(['No', 'None'], 'No')\ndf_soil_multiple_crops['CoverCropGroup'] = df_soil_multiple_crops['CoverCropGroup'].replace('BroadleafTree', 'Broadleaf')\n\nprint(df_soil_multiple_crops['CoverCropGroup'].unique())\n\n['Rye' 'Brassica' 'No' 'Mixed']\n\n\n/tmp/ipython-input-55-3554729350.py:1: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  df_soil_multiple_crops['CoverCropGroup'] = df_soil_multiple_crops['CoverCropGroup'].replace(['LL', 'Legume_Tree'], 'Legume')\n/tmp/ipython-input-55-3554729350.py:2: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  df_soil_multiple_crops['CoverCropGroup'] = df_soil_multiple_crops['CoverCropGroup'].replace(['LG', 'BG', 'AVG', 'MOT'], 'Mixed')\n/tmp/ipython-input-55-3554729350.py:3: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  df_soil_multiple_crops['CoverCropGroup'] = df_soil_multiple_crops['CoverCropGroup'].replace('Not_available', 'Unknown')\n/tmp/ipython-input-55-3554729350.py:4: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  df_soil_multiple_crops['CoverCropGroup'] = df_soil_multiple_crops['CoverCropGroup'].replace(['No', 'None'], 'No')\n/tmp/ipython-input-55-3554729350.py:5: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  df_soil_multiple_crops['CoverCropGroup'] = df_soil_multiple_crops['CoverCropGroup'].replace('BroadleafTree', 'Broadleaf')\n\n\n\ndf_soil_multiple_crops = df_soil_multiple_crops.dropna()\n\n\nprint(f\"Number of records in df_soil_multiple_crops: {len(df_soil_multiple_crops)}\")\n\nNumber of records in df_soil_multiple_crops: 180\n\n\nThese soil families do not contain legume cover crops, which are found to have the highest influence on soil carbon, though this question does not consider soil carbon directly, legumes are known to fix nitrogen, and so it would be better to have some data on legume cover crops.\n\nPlots of crop yield per soil family and cover crop\n\n\n# Group the dataframe by SoilFamily and apply the scaler to the 'Yield' column within each group\ndf_soil_multiple_crops['Scaled_Yield'] = df_soil_multiple_crops.groupby('SoilFamily')['Yield'].transform(lambda x: scaler.fit_transform(x.values.reshape(-1, 1)).flatten())\n\nplt.figure(figsize=(16, 9))\nsns.violinplot(data=df_soil_multiple_crops, x='SoilFamily', y='Scaled_Yield', hue='CoverCropGroup', split=True, inner='quart', palette='tab10')\n\nplt.title('Yield Distribution per Soil Family by Cover Crop Group')\nplt.xlabel('Soil Family')\nplt.ylabel('Scaled Yield')\nplt.xticks(rotation=45, ha='right')\nplt.legend(title='Cover Crop Group', bbox_to_anchor=(1.05, 1), loc='upper left')\nplt.tight_layout()\nplt.show()\n\n/tmp/ipython-input-26-169645150.py:2: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  df_soil_multiple_crops['Scaled_Yield'] = df_soil_multiple_crops.groupby('SoilFamily')['Yield'].transform(lambda x: scaler.fit_transform(x.values.reshape(-1, 1)).flatten())\n\n\n\n\n\n\n\n\n\n\n# Iterate through each unique soil family\nfor soil_family in df_soil_multiple_crops.SoilFamily.unique():\n    # Filter data for the current soil family\n    df_soil = df_soil_multiple_crops[df_soil_multiple_crops['SoilFamily'] == soil_family]\n\n    # Check if there is data for this soil family\n    if not df_soil.empty:\n        plt.figure(figsize=(5, 5))\n        sns.boxplot(data=df_soil, x='GrainCropGroup', y='Scaled_Yield', hue='CoverCropGroup', palette='viridis')\n        plt.title(f'{soil_family}')\n        plt.xlabel('Grain Crop Group')\n        plt.ylabel('Yield (scaled)')\n        plt.xticks(rotation=45, ha='right')\n        plt.legend(title='Cover Crop Group', bbox_to_anchor=(1.05, 1), loc='upper left')\n        plt.tight_layout()\n        plt.show()\n    else:\n        print(f\"No data available for SoilFamily: {soil_family}\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCheck significance of yield/grain crop group/cover crop group relationships\n\n# Iterate through each unique SoilFamily\nfor soil_family in df_soil_multiple_crops['SoilFamily'].unique():\n    print(f\"\\nAnalyzing SoilFamily: {soil_family}\")\n\n    # Filter data for the current soil family\n    df_soil = df_soil_multiple_crops[df_soil_multiple_crops['SoilFamily'] == soil_family].copy()\n\n    # Check if there is data for this soil family\n    if not df_soil.empty:\n        # Iterate through each unique GrainCropGroup within this soil family\n        for grain_crop_group in df_soil['GrainCropGroup'].unique():\n            print(f\"  Analyzing GrainCropGroup: {grain_crop_group}\")\n\n            # Filter data for the current grain crop group within this soil family\n            df_grain_crop = df_soil[df_soil['GrainCropGroup'] == grain_crop_group].copy()\n\n            # Check if there are multiple CoverCropGroups to compare\n            if df_grain_crop['CoverCropGroup'].nunique() &gt; 1:\n                # Get the unique cover crop groups\n                cover_crop_groups = df_grain_crop['CoverCropGroup'].unique()\n\n                # Perform pairwise comparisons between cover crop groups using independent t-tests\n                for i in range(len(cover_crop_groups)):\n                    for j in range(i + 1, len(cover_crop_groups)):\n                        group1 = cover_crop_groups[i]\n                        group2 = cover_crop_groups[j]\n\n                        yields_group1 = df_grain_crop[df_grain_crop['CoverCropGroup'] == group1]['Scaled_Yield'].dropna()\n                        yields_group2 = df_grain_crop[df_grain_crop['CoverCropGroup'] == group2]['Scaled_Yield'].dropna()\n\n                        # Ensure both groups have enough data for a t-test (at least 2 samples)\n                        if len(yields_group1) &gt;= 2 and len(yields_group2) &gt;= 2:\n                            try:\n                                # Perform Levene's test for equal variances\n                                levene_stat, levene_p = stats.levene(yields_group1, yields_group2)\n                                equal_var = levene_p &gt;= 0.05 # If p &gt;= 0.05, assume equal variances\n\n                                # Perform independent t-test\n                                t_stat, p_value = stats.ttest_ind(yields_group1, yields_group2, equal_var=equal_var)\n\n                                print(f\"    Comparison between {group1} and {group2}:\")\n                                print(f\"      Levene's Test p-value: {levene_p:.4f} (Assuming equal variances: {equal_var})\")\n                                print(f\"      Independent t-test p-value: {p_value:.4f}\")\n\n                                # Interpret the result\n                                alpha = 0.05\n                                if p_value &lt; alpha:\n                                    print(f\"      Result: Scaled_Yield is significantly different between {group1} and {group2} (p &lt; {alpha}).\")\n                                else:\n                                    print(f\"      Result: There is no statistically significant difference in Scaled_Yield between {group1} and {group2} (p &gt;= {alpha}).\")\n\n                            except ValueError as e:\n                                print(f\"      Could not perform t-test for {group1} vs {group2}: {e}\")\n                        else:\n                            print(f\"    Not enough data to compare {group1} and {group2} (need at least 2 samples in each group).\")\n\n            elif df_grain_crop['CoverCropGroup'].nunique() == 1:\n                 print(f\"  Only one CoverCropGroup ('{df_grain_crop['CoverCropGroup'].iloc[0]}') for {grain_crop_group}. Cannot perform comparison.\")\n            else:\n                 print(f\"  No CoverCropGroup data available for {grain_crop_group}.\")\n\n    else:\n        print(f\"No data available for SoilFamily: {soil_family}\")\n\n\nAnalyzing SoilFamily: Mesic Aquic Fragiudalf\n  Analyzing GrainCropGroup: Corn\n    Comparison between Rye and No:\n      Levene's Test p-value: 0.8904 (Assuming equal variances: True)\n      Independent t-test p-value: 0.6403\n      Result: There is no statistically significant difference in Scaled_Yield between Rye and No (p &gt;= 0.05).\n  Analyzing GrainCropGroup: Soybean\n    Comparison between Rye and No:\n      Levene's Test p-value: 0.8729 (Assuming equal variances: True)\n      Independent t-test p-value: 0.9234\n      Result: There is no statistically significant difference in Scaled_Yield between Rye and No (p &gt;= 0.05).\n  Analyzing GrainCropGroup: Corn-soybean\n    Comparison between Rye and No:\n      Levene's Test p-value: 0.2413 (Assuming equal variances: True)\n      Independent t-test p-value: 0.8458\n      Result: There is no statistically significant difference in Scaled_Yield between Rye and No (p &gt;= 0.05).\n\nAnalyzing SoilFamily: Dystric cambisol on granite bedrock\n  Analyzing GrainCropGroup: Corn-wheat\n    Not enough data to compare Rye and No (need at least 2 samples in each group).\n  Analyzing GrainCropGroup: Wheat\n    Not enough data to compare Rye and No (need at least 2 samples in each group).\n  Analyzing GrainCropGroup: Corn\n    Not enough data to compare Rye and No (need at least 2 samples in each group).\n\nAnalyzing SoilFamily: Haplic luvisol on calcareous bedrock\n  Analyzing GrainCropGroup: Wheat\n    Comparison between Brassica and No:\n      Levene's Test p-value: 0.0000 (Assuming equal variances: False)\n      Independent t-test p-value: 0.5568\n      Result: There is no statistically significant difference in Scaled_Yield between Brassica and No (p &gt;= 0.05).\n  Analyzing GrainCropGroup: Arable\n    Comparison between Brassica and No:\n      Levene's Test p-value: 0.0000 (Assuming equal variances: False)\n      Independent t-test p-value: 0.2856\n      Result: There is no statistically significant difference in Scaled_Yield between Brassica and No (p &gt;= 0.05).\n  Analyzing GrainCropGroup: Vegetable\n    Comparison between Brassica and No:\n      Levene's Test p-value: 0.0000 (Assuming equal variances: False)\n      Independent t-test p-value: 0.9630\n      Result: There is no statistically significant difference in Scaled_Yield between Brassica and No (p &gt;= 0.05).\n\nAnalyzing SoilFamily: Mesic Vertic Epiaqualf\n  Analyzing GrainCropGroup: Corn\n    Comparison between Rye and No:\n      Levene's Test p-value: 0.4802 (Assuming equal variances: True)\n      Independent t-test p-value: 0.7163\n      Result: There is no statistically significant difference in Scaled_Yield between Rye and No (p &gt;= 0.05).\n  Analyzing GrainCropGroup: Soybean\n    Comparison between Rye and No:\n      Levene's Test p-value: 0.5998 (Assuming equal variances: True)\n      Independent t-test p-value: 0.0947\n      Result: There is no statistically significant difference in Scaled_Yield between Rye and No (p &gt;= 0.05).\n  Analyzing GrainCropGroup: Wheat\n    Comparison between Rye and No:\n      Levene's Test p-value: 0.6539 (Assuming equal variances: True)\n      Independent t-test p-value: 0.6311\n      Result: There is no statistically significant difference in Scaled_Yield between Rye and No (p &gt;= 0.05).\n\nAnalyzing SoilFamily: Typic Hapludult\n  Analyzing GrainCropGroup: Unknown\n    Comparison between No and Mixed:\n      Levene's Test p-value: 0.2676 (Assuming equal variances: True)\n      Independent t-test p-value: 0.1163\n      Result: There is no statistically significant difference in Scaled_Yield between No and Mixed (p &gt;= 0.05).\n  Analyzing GrainCropGroup: Corn\n  Only one CoverCropGroup ('No') for Corn. Cannot perform comparison.\n  Analyzing GrainCropGroup: Wheat\n  Only one CoverCropGroup ('No') for Wheat. Cannot perform comparison.\n\nAnalyzing SoilFamily: Haplic Luvisols\n  Analyzing GrainCropGroup: Maize\n    Comparison between Mixed and No:\n      Levene's Test p-value: 0.4566 (Assuming equal variances: True)\n      Independent t-test p-value: 0.0884\n      Result: There is no statistically significant difference in Scaled_Yield between Mixed and No (p &gt;= 0.05).\n  Analyzing GrainCropGroup: Wheat\n    Comparison between Mixed and No:\n      Levene's Test p-value: 0.0000 (Assuming equal variances: False)\n      Independent t-test p-value: 0.0028\n      Result: Scaled_Yield is significantly different between Mixed and No (p &lt; 0.05).\n  Analyzing GrainCropGroup: Soybean\n    Comparison between Mixed and No:\n      Levene's Test p-value: 0.0000 (Assuming equal variances: False)\n      Independent t-test p-value: 0.0885\n      Result: There is no statistically significant difference in Scaled_Yield between Mixed and No (p &gt;= 0.05).\n  Analyzing GrainCropGroup: Orchard\n  Only one CoverCropGroup ('No') for Orchard. Cannot perform comparison.\n\n\n/usr/local/lib/python3.11/dist-packages/scipy/stats/_morestats.py:3057: RuntimeWarning: divide by zero encountered in scalar divide\n  W = numer / denom\n\n\n\n# Apply Shapiro-Wilk test to check for normality of Scaled_Yield\n# Iterate through each unique SoilFamily and GrainCropGroup combination with sufficient data\nfor soil_family in df_soil_multiple_crops['SoilFamily'].unique():\n    for grain_crop_group in df_soil_multiple_crops[df_soil_multiple_crops['SoilFamily'] == soil_family]['GrainCropGroup'].unique():\n        # Filter data for the current combination\n        df_combination = df_soil_multiple_crops[(df_soil_multiple_crops['SoilFamily'] == soil_family) & (df_soil_multiple_crops['GrainCropGroup'] == grain_crop_group)].copy()\n\n        # Check if there's enough data (at least 3 samples are generally recommended for Shapiro-Wilk)\n        if len(df_combination) &gt;= 3:\n            # Get the Scaled_Yield data\n            scaled_yield_data = df_combination['Scaled_Yield'].dropna()\n\n            if len(scaled_yield_data) &gt;= 3:\n                # Perform Shapiro-Wilk test\n                try:\n                    shapiro_statistic, shapiro_p_value = stats.shapiro(scaled_yield_data)\n\n                    print(f\"\\nShapiro-Wilk Test for SoilFamily: {soil_family}, GrainCropGroup: {grain_crop_group}\")\n                    print(f\"  Shapiro-Wilk Statistic: {shapiro_statistic:.4f}\")\n                    print(f\"  P-value: {shapiro_p_value:.4f}\")\n\n                    # Interpret the result\n                    alpha = 0.05\n                    if shapiro_p_value &lt; alpha:\n                        print(f\"  Result: The Scaled_Yield distribution for this combination is likely not normal (p &lt; {alpha}).\")\n                    else:\n                        print(f\"  Result: The Scaled_Yield distribution for this combination is likely normal (p &gt;= {alpha}).\")\n\n                except Exception as e:\n                    print(f\"  Could not perform Shapiro-Wilk test for SoilFamily: {soil_family}, GrainCropGroup: {grain_crop_group}: {e}\")\n            else:\n                print(f\"\\nNot enough non-null data (need at least 3) for Shapiro-Wilk Test for SoilFamily: {soil_family}, GrainCropGroup: {grain_crop_group}\")\n        else:\n            print(f\"\\nNot enough data (need at least 3 samples) for Shapiro-Wilk Test for SoilFamily: {soil_family}, GrainCropGroup: {grain_crop_group}\")\n\n\n\nShapiro-Wilk Test for SoilFamily: Mesic Aquic Fragiudalf, GrainCropGroup: Corn\n  Shapiro-Wilk Statistic: 0.8803\n  P-value: 0.1895\n  Result: The Scaled_Yield distribution for this combination is likely normal (p &gt;= 0.05).\n\nShapiro-Wilk Test for SoilFamily: Mesic Aquic Fragiudalf, GrainCropGroup: Soybean\n  Shapiro-Wilk Statistic: 0.6621\n  P-value: 0.0008\n  Result: The Scaled_Yield distribution for this combination is likely not normal (p &lt; 0.05).\n\nShapiro-Wilk Test for SoilFamily: Mesic Aquic Fragiudalf, GrainCropGroup: Corn-soybean\n  Shapiro-Wilk Statistic: 0.9362\n  P-value: 0.5742\n  Result: The Scaled_Yield distribution for this combination is likely normal (p &gt;= 0.05).\n\nNot enough data (need at least 3 samples) for Shapiro-Wilk Test for SoilFamily: Dystric cambisol on granite bedrock, GrainCropGroup: Corn-wheat\n\nNot enough data (need at least 3 samples) for Shapiro-Wilk Test for SoilFamily: Dystric cambisol on granite bedrock, GrainCropGroup: Wheat\n\nNot enough data (need at least 3 samples) for Shapiro-Wilk Test for SoilFamily: Dystric cambisol on granite bedrock, GrainCropGroup: Corn\n\nShapiro-Wilk Test for SoilFamily: Haplic luvisol on calcareous bedrock, GrainCropGroup: Wheat\n  Shapiro-Wilk Statistic: 0.9202\n  P-value: 0.5381\n  Result: The Scaled_Yield distribution for this combination is likely normal (p &gt;= 0.05).\n\nShapiro-Wilk Test for SoilFamily: Haplic luvisol on calcareous bedrock, GrainCropGroup: Arable\n  Shapiro-Wilk Statistic: 0.8947\n  P-value: 0.4051\n  Result: The Scaled_Yield distribution for this combination is likely normal (p &gt;= 0.05).\n\nShapiro-Wilk Test for SoilFamily: Haplic luvisol on calcareous bedrock, GrainCropGroup: Vegetable\n  Shapiro-Wilk Statistic: 0.7599\n  P-value: 0.0476\n  Result: The Scaled_Yield distribution for this combination is likely not normal (p &lt; 0.05).\n\nShapiro-Wilk Test for SoilFamily: Mesic Vertic Epiaqualf, GrainCropGroup: Corn\n  Shapiro-Wilk Statistic: 0.9771\n  P-value: 0.8375\n  Result: The Scaled_Yield distribution for this combination is likely normal (p &gt;= 0.05).\n\nShapiro-Wilk Test for SoilFamily: Mesic Vertic Epiaqualf, GrainCropGroup: Soybean\n  Shapiro-Wilk Statistic: 0.9223\n  P-value: 0.0657\n  Result: The Scaled_Yield distribution for this combination is likely normal (p &gt;= 0.05).\n\nShapiro-Wilk Test for SoilFamily: Mesic Vertic Epiaqualf, GrainCropGroup: Wheat\n  Shapiro-Wilk Statistic: 0.9625\n  P-value: 0.4899\n  Result: The Scaled_Yield distribution for this combination is likely normal (p &gt;= 0.05).\n\nShapiro-Wilk Test for SoilFamily: Typic Hapludult, GrainCropGroup: Unknown\n  Shapiro-Wilk Statistic: 0.8458\n  P-value: 0.0118\n  Result: The Scaled_Yield distribution for this combination is likely not normal (p &lt; 0.05).\n\nShapiro-Wilk Test for SoilFamily: Typic Hapludult, GrainCropGroup: Corn\n  Shapiro-Wilk Statistic: 0.8715\n  P-value: 0.0153\n  Result: The Scaled_Yield distribution for this combination is likely not normal (p &lt; 0.05).\n\nShapiro-Wilk Test for SoilFamily: Typic Hapludult, GrainCropGroup: Wheat\n  Shapiro-Wilk Statistic: 0.9374\n  P-value: 0.3858\n  Result: The Scaled_Yield distribution for this combination is likely normal (p &gt;= 0.05).\n\nShapiro-Wilk Test for SoilFamily: Haplic Luvisols, GrainCropGroup: Maize\n  Shapiro-Wilk Statistic: 0.9133\n  P-value: 0.3776\n  Result: The Scaled_Yield distribution for this combination is likely normal (p &gt;= 0.05).\n\nShapiro-Wilk Test for SoilFamily: Haplic Luvisols, GrainCropGroup: Wheat\n  Shapiro-Wilk Statistic: 0.7353\n  P-value: 0.0279\n  Result: The Scaled_Yield distribution for this combination is likely not normal (p &lt; 0.05).\n\nShapiro-Wilk Test for SoilFamily: Haplic Luvisols, GrainCropGroup: Soybean\n  Shapiro-Wilk Statistic: 0.8536\n  P-value: 0.2379\n  Result: The Scaled_Yield distribution for this combination is likely normal (p &gt;= 0.05).\n\nNot enough data (need at least 3 samples) for Shapiro-Wilk Test for SoilFamily: Haplic Luvisols, GrainCropGroup: Orchard\n\n\n\n# Create a new dataframe for correlation analysis\ndf_correlation = df_soil_multiple_crops[['SoilFamily', 'CoverCropGroup', 'Scaled_Yield']].copy()\n\n# Pivot table for heatmap visualization\n# We will calculate the average scaled yield for each combination of SoilFamily and CoverCropGroup\nheatmap_data = df_correlation.pivot_table(index='SoilFamily', columns='CoverCropGroup', values='Scaled_Yield', aggfunc='mean')\n\n# Plot the heatmap\nplt.figure(figsize=(10, 7))\nsns.heatmap(heatmap_data, annot=True, fmt=\".2f\", cmap='coolwarm', center=0)\nplt.title('Average Scaled Yield by Soil Family and Cover Crop Group')\nplt.xlabel('Cover Crop Group')\nplt.ylabel('Soil Family')\nplt.xticks(rotation=45, ha='right')\nplt.yticks(rotation=0)\nplt.tight_layout()\nplt.show()"
  },
  {
    "objectID": "question_3_4.html#additionally-analyse-to-check-if-cover-crops-effect-crop-yield-not-considering-soil-family",
    "href": "question_3_4.html#additionally-analyse-to-check-if-cover-crops-effect-crop-yield-not-considering-soil-family",
    "title": "3. Which crops grow the best in each soil type?",
    "section": "additionally, analyse to check if cover crops effect crop yield (not considering soil family)",
    "text": "additionally, analyse to check if cover crops effect crop yield (not considering soil family)\n\n# Ensure 'CoverCropGroup' and 'Scaled_Yield' columns are present and have no missing values for this analysis\ndf_subset_anova = df_subset[['CoverCropGroup', 'Yield_scaled']].dropna().copy()\n\n# Perform One-Way ANOVA\n# The formula 'Scaled_Yield ~ C(CoverCropGroup)' specifies Scaled_Yield as the dependent variable\n# and CoverCropGroup as the independent categorical variable. C() indicates that CoverCropGroup should be treated as categorical.\ntry:\n    model = ols('Yield_scaled ~ C(CoverCropGroup)', data=df_subset_anova).fit()\n    anova_table = sm.stats.anova_lm(model, typ=2) # Type 2 ANOVA\n\n    print(\"\\nOne-Way ANOVA: Effect of CoverCropGroup on Yield_scaled (ignoring SoilFamily)\")\n    print(anova_table)\n\n    # Interpret the ANOVA result\n    alpha = 0.05\n    p_value = anova_table['PR(&gt;F)'].iloc[0] # Get the p-value for CoverCropGroup\n\n    if p_value &lt; alpha:\n        print(f\"  Result: The mean scaled yield is significantly different across different CoverCropGroups (p &lt; {alpha}).\")\n    else:\n        print(f\"  Result: There is no statistically significant difference in mean scaled yield across different CoverCropGroups (p &gt;= {alpha}).\")\n\nexcept Exception as e:\n    print(f\"\\nCould not perform One-Way ANOVA: {e}\")\n    print(\"Please ensure 'CoverCropGroup' is a valid column and 'Scaled_Yield' has been calculated correctly on df_subset.\")\n\n# To visualize this, we can use a boxplot or violin plot of Scaled_Yield by CoverCropGroup\nplt.figure(figsize=(10, 6))\nsns.boxplot(data=df_subset_anova, x='CoverCropGroup', y='Yield_scaled',hue='CoverCropGroup',  palette='viridis')\nplt.title('Scaled Yield Distribution by Cover Crop Group (Overall)')\nplt.xlabel('Cover Crop Group')\nplt.ylabel('Scaled Yield')\nplt.xticks(rotation=45, ha='right')\nplt.tight_layout()\nplt.show()\n\nplt.figure(figsize=(10, 6))\nsns.violinplot(data=df_subset_anova, x='CoverCropGroup', y='Yield_scaled', hue='CoverCropGroup', palette='viridis', inner='quart')\nplt.title('Scaled Yield Distribution by Cover Crop Group (Overall)')\nplt.xlabel('Cover Crop Group')\nplt.ylabel('Scaled Yield')\nplt.xticks(rotation=45, ha='right')\nplt.tight_layout()\nplt.show()\n\n\nOne-Way ANOVA: Effect of CoverCropGroup on Yield_scaled (ignoring SoilFamily)\n                      sum_sq      df         F        PR(&gt;F)\nC(CoverCropGroup)   0.940988    14.0  6.297956  1.290184e-12\nResidual           35.517279  3328.0       NaN           NaN\n  Result: The mean scaled yield is significantly different across different CoverCropGroups (p &lt; 0.05).\n\n\n/tmp/ipython-input-42-3933671685.py:29: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n  p_value = anova_table['PR(&gt;F)'][0] # Get the p-value for CoverCropGroup"
  },
  {
    "objectID": "question_2.html",
    "href": "question_2.html",
    "title": "Question: How do different cover crop practices affect soil organic carbon (SOC) levels across regions?",
    "section": "",
    "text": "Part 1 - Import libraries and load dataset\n\n# --- Part 1: Import libraries and load dataset ---\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport scipy.stats as stats\nfrom scipy.stats import kruskal\nimport statsmodels.api as sm\nfrom statsmodels.formula.api import ols\nfrom statsmodels.stats.multicomp import pairwise_tukeyhsd\nfrom google.colab import drive\nimport sys, os\nfrom IPython.display import display, Markdown\nimport warnings\nfrom statsmodels.stats.multicomp import MultiComparison\nfrom matplotlib.patches import Patch\n\n\n# Mount Google Drive silently\n_original_stdout = sys.stdout\nsys.stdout = open(os.devnull, 'w')\ndrive.mount('/content/drive')\nsys.stdout.close()\nsys.stdout = _original_stdout\nprint(\"✅ Google Drive mounted.\")\n\n# Load dataset from Google Drive\ndata_path = \"/content/drive/MyDrive/SoilHealthDB_V2.xlsx\"\ndf = pd.read_excel(data_path, sheet_name=\"Sheet1\")\n\n# Clean column names\ndf.columns = df.columns.str.strip().str.lower()\n\n# Overview of the dataset\nprint(f\"✅ Loaded dataset with {df.shape[0]} rows and {df.shape[1]} columns.\")\ndf.head()\n\n✅ Google Drive mounted.\n✅ Loaded dataset with 5907 rows and 270 columns.\n\n\n\n  \n    \n\n\n\n\n\n\nstudyid\nexperimentid\nauthor_f\nauthor_g\nyearpublication\nsamplingyear\njournal\nsiteinfor\ncountry\nlatitude\n...\nmbn_c_sd\nmbn_t_sd\n38.mbn_comments\nmicroelement\nsqi\ness\ntexture_c\ncomments1\ncomments2\ncomments3\n\n\n\n\n0\n1\n1-1\nAbawi\nG.S.\n2000\nNaN\nApplied Soil Ecology\nNew York\nUSA\n40.71\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nRoot infected by rot\nNaN\nNaN\n\n\n1\n1\n1-1\nAbawi\nG.S.\n2000\nNaN\nApplied Soil Ecology\nNew York\nUSA\n40.71\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nRoot infected by rot\nNaN\nNaN\n\n\n2\n1\n1-2\nAbawi\nG.S.\n2000\nNaN\nApplied Soil Ecology\nNew York\nUSA\n40.71\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nRoot infected by rot\nNaN\nNaN\n\n\n3\n1\n1-1\nAbawi\nG.S.\n2000\nNaN\nApplied Soil Ecology\nNew York\nUSA\n40.71\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nRoot infected by rot\nNaN\nNaN\n\n\n4\n1\n1-4\nAbawi\nG.S.\n2000\nNaN\nApplied Soil Ecology\nNew York\nUSA\n40.71\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nRoot infected by rot\nNaN\nNaN\n\n\n\n\n5 rows × 270 columns\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n    \n      \n\n\n    \n        \n    \n\n      \n\n\n\n      \n    \n\n    \n  \n\n\n\n\nPart 2 - Filter and prepare relevant data\n\n# --- Part 2: Filter and prepare relevant data ---\n\n# Verificar valores em falta nas variáveis essenciais\nessential_cols = [\"covercropgroup\", \"backgroundsoc\", \"country\"]\nmissing_check = df[essential_cols].isna().sum()\nprint(\"🔍 Valores em falta por coluna:\\n\", missing_check)\n\n# Selecionar apenas colunas essenciais\ncolumns_to_keep = [\n    \"covercropgroup\",       # Grupo de culturas de cobertura\n    \"backgroundsoc\",        # Carbono orgânico no solo\n    \"country\"               # Localização (proxy regional)\n]\n\n# Filtrar linhas com dados completos nessas variáveis\ndf_soc = df[columns_to_keep].dropna()\n\n# Mostrar visão geral\nprint(f\"✅ Conjunto de dados filtrado com {df_soc.shape[0]} linhas completas.\")\ndf_soc.head()\n\n🔍 Valores em falta por coluna:\n covercropgroup     845\nbackgroundsoc     3305\ncountry              0\ndtype: int64\n✅ Conjunto de dados filtrado com 2400 linhas completas.\n\n\n\n  \n    \n\n\n\n\n\n\ncovercropgroup\nbackgroundsoc\ncountry\n\n\n\n\n83\nRye\n1.80\nUSA\n\n\n84\nRye\n1.80\nUSA\n\n\n85\nRye\n0.94\nUSA\n\n\n86\nRye\n0.65\nUSA\n\n\n87\nRye\n0.47\nUSA\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n    \n      \n\n\n    \n        \n    \n\n      \n\n\n\n      \n    \n\n    \n  \n\n\n\n\nPart 3 - Descriptive statistics\n\n# --- Part 3: Descriptive statistics ---\n\n# Generate descriptive statistics of SOC by cover crop group\nsoc_summary = df_soc.groupby(\"covercropgroup\")[\"backgroundsoc\"].describe()\n\n# Display the results\nprint(\"📊 Descriptive statistics of Soil Organic Carbon (SOC) by Cover Crop Group:\")\ndisplay(soc_summary)\n\n📊 Descriptive statistics of Soil Organic Carbon (SOC) by Cover Crop Group:\n\n\n\n  \n    \n\n\n\n\n\n\ncount\nmean\nstd\nmin\n25%\n50%\n75%\nmax\n\n\ncovercropgroup\n\n\n\n\n\n\n\n\n\n\n\n\nAVG\n24.0\n1.580615\n0.843602\n0.750000\n0.750000\n1.567814\n1.775581\n3.150000\n\n\nBrassica\n69.0\n1.684340\n0.914464\n0.600000\n1.000000\n1.330000\n2.900000\n3.200000\n\n\nBroadleaf\n32.0\n1.430625\n0.555273\n0.620000\n0.620000\n1.800000\n1.800000\n1.800000\n\n\nBroadleaf/Brassica\n1.0\n0.161000\nNaN\n0.161000\n0.161000\n0.161000\n0.161000\n0.161000\n\n\nGrass\n305.0\n2.638680\n1.384504\n0.600000\n1.700000\n2.490000\n2.810000\n6.100000\n\n\nLB\n4.0\n2.900000\n0.000000\n2.900000\n2.900000\n2.900000\n2.900000\n2.900000\n\n\nLG\n82.0\n1.501463\n0.603617\n0.880000\n0.880000\n1.650000\n1.957500\n2.900000\n\n\nLL\n81.0\n0.886677\n0.150603\n0.460000\n0.800000\n0.900000\n0.991111\n1.111111\n\n\nLegume\n1478.0\n1.320739\n0.875769\n0.140000\n0.740000\n1.100000\n1.710000\n5.600000\n\n\nLegume_Tree\n147.0\n1.722449\n0.616134\n0.880000\n0.880000\n2.170000\n2.170000\n2.170000\n\n\nMMT\n12.0\n1.160000\n0.000000\n1.160000\n1.160000\n1.160000\n1.160000\n1.160000\n\n\nMOT\n20.0\n1.947513\n0.902236\n0.686525\n0.717037\n2.040000\n2.810000\n2.810000\n\n\nMixed\n16.0\n0.970306\n0.795097\n0.528044\n0.528044\n0.528044\n1.111111\n2.900000\n\n\nNo\n14.0\n2.919198\n0.791609\n2.290000\n2.300000\n2.310000\n3.575000\n4.508772\n\n\nNot_available\n2.0\n2.090000\n0.000000\n2.090000\n2.090000\n2.090000\n2.090000\n2.090000\n\n\nRye\n113.0\n1.313743\n0.532902\n0.470000\n0.880000\n1.160000\n1.550000\n2.800000\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n    \n      \n\n\n    \n        \n    \n\n      \n\n\n\n      \n    \n\n  \n    \n    \n\n  \n    \n  \n    \n    \n  \n\n    \n  \n\n\n\n# Exploratory Correlation Analysis\n\n# Variables for correlation\ncor_vars = [\"backgroundsoc\", \"duration\", \"soilph\"]\n\n# Compute Spearman correlation matrix\ncorr_matrix = df[cor_vars].corr(method=\"spearman\")\n\n# Display styled table\nstyled_corr = corr_matrix.style\\\n    .background_gradient(cmap=\"RdBu_r\", vmin=-1, vmax=1)\\\n    .format(\"{:.2f}\")\\\n    .set_caption(\"Spearman Correlation Matrix Among Key Variables\")\\\n    .set_properties(**{\"text-align\": \"center\"})\n\ndisplay(styled_corr)\n\n# Add vertical space before plot\ndisplay(Markdown(\"&lt;br&gt;&lt;br&gt;\"))\n\n# Plot heatmap\nplt.figure(figsize=(8, 6))\nsns.heatmap(\n    corr_matrix,\n    annot=True,\n    fmt=\".2f\",\n    cmap=\"RdBu_r\",\n    linewidths=0.5,\n    linecolor='white',\n    square=True,\n    vmin=-1, vmax=1,\n    cbar_kws={\"shrink\": 0.8, \"label\": \"Spearman Correlation\"}\n)\nplt.title(\"Spearman Correlation Among Key Variables\", fontsize=14)\nplt.xticks(rotation=45, ha='right', fontsize=10)\nplt.yticks(rotation=0, fontsize=10)\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\nTable 1: Spearman Correlation Matrix Among Key Variables\n\n\n\n\n\n \nbackgroundsoc\nduration\nsoilph\n\n\n\n\nbackgroundsoc\n1.00\n-0.01\n0.12\n\n\nduration\n-0.01\n1.00\n0.21\n\n\nsoilph\n0.12\n0.21\n1.00\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPart 4 - Data visualization\n\n# --- Part 4: Data Visualization ---\n\n# Set Seaborn style\nsns.set(style=\"whitegrid\")\n\n# Create figure and axis\nfig, ax = plt.subplots(figsize=(14, 6))\n\n# Create colored boxplot using hue and palette (with no legend)\nsns.boxplot(\n    data=df_soc,\n    x=\"covercropgroup\",\n    y=\"backgroundsoc\",\n    hue=\"covercropgroup\",\n    palette=\"Set3\",\n    legend=False,\n    ax=ax\n)\n\n# Improve label readability\nax.tick_params(axis='x', rotation=45)\nax.set_xlabel(\"Cover Crop Group\")\nax.set_ylabel(\"Soil Organic Carbon (%)\")\nax.set_title(\"Distribution of Soil Organic Carbon by Cover Crop Group\")\n\n# Layout adjustment\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n\n# --- Country Verification and Frequency Analysis ---\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Step 1: Normalize country names (strip spaces, standardize capitalization)\ndf_soc[\"country\"] = df_soc[\"country\"].astype(str).str.strip().str.title()\n\n# Step 2: Show all unique countries (to inspect for typos or inconsistencies)\nunique_countries = df_soc[\"country\"].unique()\nprint(f\"🌍 Unique countries in dataset ({len(unique_countries)} total):\")\nprint(unique_countries)\n\n# Step 3: Count occurrences of each country\ncountry_counts = df_soc[\"country\"].value_counts()\nprint(\"\\n📊 Top countries by number of observations:\")\nprint(country_counts.head(15))  # Adjust as needed\n\n# Step 4: Optional visualization of top N countries\nplt.figure(figsize=(10, 6))\nsns.barplot(\n    x=country_counts.head(10).values,\n    y=country_counts.head(10).index,\n    palette=\"viridis\"\n)\nplt.xlabel(\"Number of Observations\")\nplt.ylabel(\"Country\")\nplt.title(\"Top 10 Countries in the Dataset\")\nplt.tight_layout()\nplt.show()\n\n🌍 Unique countries in dataset (25 total):\n['Usa' 'Canada' 'Brazil' 'Nigeria' 'Argentina' 'Denmark' 'Australia'\n 'Ghana' 'Malawi' 'Zambia' 'Uganda' 'Kenya' 'Zimbabwe' 'Cameroon'\n 'Tanzania' 'Togo' 'China' 'France' 'South Korea' 'Turkey' 'Spain'\n 'England' 'Italy' 'Germany' 'Indonesia']\n\n📊 Top countries by number of observations:\ncountry\nChina       497\nUsa         415\nZambia      380\nNigeria     357\nMalawi      180\nKenya       100\nUganda       96\nSpain        50\nTanzania     43\nTurkey       41\nDenmark      41\nTogo         40\nZimbabwe     33\nGhana        20\nCameroon     16\nName: count, dtype: int64\n\n\n\n\n\n\n\n\n\n\n# --- SOC Mean Heatmap by Cover Crop Group and Country ---\n\n# Identify top 6 countries with the most data\ntop_countries = df_soc[\"country\"].value_counts().head(6).index.tolist()\ndf_top = df_soc[df_soc[\"country\"].isin(top_countries)]\n\n# Create pivot table: mean SOC per group and country\npivot_df = df_top.groupby([\"covercropgroup\", \"country\"])[\"backgroundsoc\"].mean().unstack()\n\n# Plot heatmap\nplt.figure(figsize=(10, 6))\nsns.heatmap(\n    pivot_df,\n    annot=True,\n    cmap=\"YlGnBu\",\n    fmt=\".2f\",\n    linewidths=0.5,\n    linecolor=\"gray\"\n)\nplt.title(\"Average Soil Organic Carbon (%) by Cover Crop Group and Top Countries\")\nplt.ylabel(\"Cover Crop Group\")\nplt.xlabel(\"Country\")\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n\n# --- SOC Distribution by Cover Crop Group Within Each Top Country (Violin Plot) ---\n\n# Seleção dos top países\ntop_countries = df_soc[\"country\"].value_counts().head(6).index.tolist()\ndf_top = df_soc[df_soc[\"country\"].isin(top_countries)]\n\n# Filtrar combinações válidas (mín. 3 observações)\ngroup_counts = df_top.groupby([\"country\", \"covercropgroup\"]).size().reset_index(name=\"n\")\nvalid_groups = group_counts[group_counts[\"n\"] &gt;= 3][[\"country\", \"covercropgroup\"]]\ndf_filtered = df_top.merge(valid_groups, on=[\"country\", \"covercropgroup\"], how=\"inner\")\n\n# Paleta e ordem\ngroup_order = df_filtered[\"covercropgroup\"].value_counts().index.tolist()\nunique_groups = df_filtered[\"covercropgroup\"].unique()\npalette = dict(zip(unique_groups, sns.color_palette(\"Set2\", len(unique_groups))))\n\n# Criar gráfico de violin plots\ng = sns.catplot(\n    data=df_filtered,\n    x=\"covercropgroup\",\n    y=\"backgroundsoc\",\n    col=\"country\",\n    hue=\"covercropgroup\",\n    kind=\"violin\",\n    col_wrap=3,\n    height=4,\n    aspect=1.2,\n    palette=palette,\n    legend=False,\n    order=group_order,\n    cut=0,               # cortar na gama dos dados\n    inner=\"quartile\",    # mostra linhas de quartis dentro dos violinos\n    scale=\"area\"         # tamanhos proporcionais à densidade\n)\n\n# Ajustes visuais\ng.set_titles(\"Country: {col_name}\")\ng.set_axis_labels(\"Cover Crop Group\", \"Soil Organic Carbon (%)\")\ng.set_xticklabels(rotation=45, ha=\"right\")\ng.fig.subplots_adjust(top=0.9, right=0.85)\ng.fig.suptitle(\"SOC Distribution by Cover Crop Group within Each Top Country\", fontsize=15)\n\n# Legenda manual\nfrom matplotlib.patches import Patch\nlegend_patches = [Patch(facecolor=palette[group], label=group) for group in group_order]\ng.fig.legend(\n    handles=legend_patches,\n    title=\"Cover Crop Group\",\n    loc=\"center left\",\n    bbox_to_anchor=(0.91, 0.5),\n    frameon=True\n)\n\nsns.despine(trim=True)\nplt.show()\n\n\n/tmp/ipython-input-78-1498394457.py:18: FutureWarning: \n\nThe `scale` parameter has been renamed and will be removed in v0.15.0. Pass `density_norm='area'` for the same effect.\n  g = sns.catplot(\n\n\n\n\n\n\n\n\n\n\n\nPart 5 - Inferential Statistics\n\n# --- Part 5: Inferential Statistics ---\n\n# Log transformation to normalize SOC\ndf_soc[\"log_soc\"] = np.log1p(df_soc[\"backgroundsoc\"])\n\n# Disable scipy warning for zero variance in Shapiro test\nwarnings.filterwarnings(\"ignore\", category=UserWarning, module=\"scipy.stats\")\n\n# Shapiro-Wilk normality test per group (filtered)\ndef safe_shapiro(x):\n    if len(x) &gt;= 3 and np.var(x) &gt; 0:\n        try:\n            return stats.shapiro(x)\n        except:\n            return (None, None)\n    else:\n        return (None, None)\n\nnormality_results = df_soc.groupby(\"covercropgroup\")[\"backgroundsoc\"].apply(safe_shapiro)\n\n# Format results\nnormality_df = (\n    pd.DataFrame(normality_results.tolist(),\n                 index=normality_results.index,\n                 columns=[\"W (Shapiro)\", \"p-value\"])\n    .dropna()\n    .sort_values(\"p-value\")\n)\n\n# One-way ANOVA\nmodel = ols('backgroundsoc ~ C(covercropgroup)', data=df_soc).fit()\nanova_table = sm.stats.anova_lm(model, typ=2)\nanova_display = anova_table.copy()\nanova_display.columns = [\"Sum of Squares\", \"df\", \"F-Value\", \"p-Value\"]\n\n# Display results\ndisplay(Markdown(\"### 🧪 Shapiro-Wilk Normality Test per Cover Crop Group\"))\ndisplay(normality_df.style\n        .format({\"W (Shapiro)\": \"{:.3f}\", \"p-value\": \"{:.2e}\"})\n        .background_gradient(cmap=\"Oranges\", subset=[\"p-value\"])\n        .set_caption(\"Normality test sorted by p-value\"))\n\ndisplay(Markdown(\"### 📈 One-way ANOVA Table\"))\ndisplay(anova_display.style\n        .format({\"Sum of Squares\": \"{:.2f}\", \"F-Value\": \"{:.2f}\", \"p-Value\": \"{:.2e}\"})\n        .highlight_max(axis=0, color='lightgreen')\n        .set_caption(\"Effect of Cover Crop Group on SOC\"))\n\n🧪 Shapiro-Wilk Normality Test per Cover Crop Group\n\n\n\n\n\n\n\nTable 2: Normality test sorted by p-value\n\n\n\n\n\n \nW (Shapiro)\np-value\n\n\ncovercropgroup\n \n \n\n\n\n\nLegume\n0.833\n8.91e-37\n\n\nLegume_Tree\n0.601\n2.57e-18\n\n\nGrass\n0.859\n5.26e-16\n\n\nBrassica\n0.767\n4.15e-09\n\n\nLL\n0.821\n1.73e-08\n\n\nRye\n0.874\n2.31e-08\n\n\nBroadleaf\n0.586\n2.54e-08\n\n\nLG\n0.832\n3.21e-08\n\n\nMixed\n0.599\n1.59e-05\n\n\nMOT\n0.779\n4.33e-04\n\n\nAVG\n0.821\n6.72e-04\n\n\nNo\n0.772\n2.31e-03\n\n\n\n\n\n\n\n\n📈 One-way ANOVA Table\n\n\n\n\n\n\n\nTable 3: Effect of Cover Crop Group on SOC\n\n\n\n\n\n \nSum of Squares\ndf\nF-Value\np-Value\n\n\n\n\nC(covercropgroup)\n533.11\n15.000000\n43.45\n1.92e-113\n\n\nResidual\n1949.98\n2384.000000\nnan\nnan\n\n\n\n\n\n\n\n\n\n\nPart 6 - Post-hoc and Non-parametric Analysis\n\n# --- Part 6: Post-hoc and Advanced Analysis ---\n\n# Kruskal-Wallis Test (non-parametric alternative to ANOVA)\nkruskal_result = kruskal(\n    *[group[\"backgroundsoc\"].values for name, group in df_soc.groupby(\"covercropgroup\")]\n)\nprint(f\"📌 Kruskal-Wallis H-test: H = {kruskal_result.statistic:.2f}, p = {kruskal_result.pvalue:.2e}\")\n\n📌 Kruskal-Wallis H-test: H = 431.49, p = 1.64e-82\n\n\n\n# Tukey HSD Test for post-hoc comparisons\nmc = MultiComparison(df_soc[\"backgroundsoc\"], df_soc[\"covercropgroup\"])\ntukey_result = mc.tukeyhsd()\ntukey_summary = pd.DataFrame(data=tukey_result._results_table.data[1:], columns=tukey_result._results_table.data[0])\ntukey_summary.sort_values(\"p-adj\", inplace=True)\n\n# Show significant results only\nsignificant_pairs = tukey_summary[tukey_summary[\"reject\"] == True]\nprint(\"📊 Significant pairwise differences (Tukey HSD):\")\ndisplay(significant_pairs)\n\n📊 Significant pairwise differences (Tukey HSD):\n\n\n\n  \n    \n\n\n\n\n\n\ngroup1\ngroup2\nmeandiff\np-adj\nlower\nupper\nreject\n\n\n\n\n3\nAVG\nGrass\n1.0581\n0.0000\n0.4005\n1.7157\nTrue\n\n\n30\nBroadleaf\nGrass\n1.2081\n0.0000\n0.6317\n1.7844\nTrue\n\n\n20\nBrassica\nLL\n-0.7977\n0.0000\n-1.3058\n-0.2895\nTrue\n\n\n17\nBrassica\nGrass\n0.9543\n0.0000\n0.5408\n1.3678\nTrue\n\n\n59\nGrass\nMMT\n-1.4787\n0.0000\n-2.3916\n-0.5658\nTrue\n\n\n56\nGrass\nLL\n-1.7520\n0.0000\n-2.1397\n-1.3643\nTrue\n\n\n57\nGrass\nLegume\n-1.3179\n0.0000\n-1.5130\n-1.1229\nTrue\n\n\n39\nBroadleaf\nNo\n1.4886\n0.0000\n0.4946\n2.4825\nTrue\n\n\n55\nGrass\nLG\n-1.1372\n0.0000\n-1.5231\n-0.7514\nTrue\n\n\n58\nGrass\nLegume_Tree\n-0.9162\n0.0000\n-1.2277\n-0.6048\nTrue\n\n\n61\nGrass\nMixed\n-1.6684\n0.0000\n-2.4639\n-0.8728\nTrue\n\n\n89\nLL\nNo\n2.0325\n0.0000\n1.1347\n2.9303\nTrue\n\n\n81\nLG\nNo\n1.4177\n0.0000\n0.5207\n2.3147\nTrue\n\n\n85\nLL\nLegume_Tree\n0.8358\n0.0000\n0.4065\n1.2650\nTrue\n\n\n92\nLegume\nLegume_Tree\n0.4017\n0.0000\n0.1335\n0.6700\nTrue\n\n\n64\nGrass\nRye\n-1.3249\n0.0000\n-1.6665\n-0.9833\nTrue\n\n\n96\nLegume\nNo\n1.5985\n0.0000\n0.7655\n2.4314\nTrue\n\n\n114\nMixed\nNo\n1.9489\n0.0000\n0.8137\n3.0841\nTrue\n\n\n118\nNo\nRye\n-1.6055\n0.0000\n-2.4843\n-0.7266\nTrue\n\n\n107\nMMT\nNo\n1.7592\n0.0001\n0.5389\n2.9795\nTrue\n\n\n87\nLL\nMOT\n1.0608\n0.0003\n0.2863\n1.8353\nTrue\n\n\n102\nLegume_Tree\nNo\n1.1967\n0.0003\n0.3292\n2.0643\nTrue\n\n\n26\nBrassica\nNo\n1.2349\n0.0004\n0.3256\n2.1441\nTrue\n\n\n12\nAVG\nNo\n1.3386\n0.0012\n0.2954\n2.3817\nTrue\n\n\n75\nLG\nLL\n-0.6148\n0.0016\n-1.1007\n-0.1289\nTrue\n\n\n66\nLB\nLL\n-2.0133\n0.0016\n-3.6021\n-0.4246\nTrue\n\n\n84\nLL\nLegume\n0.4341\n0.0028\n0.0801\n0.7880\nTrue\n\n\n71\nLB\nMixed\n-1.9297\n0.0132\n-3.6637\n-0.1957\nTrue\n\n\n104\nLegume_Tree\nRye\n-0.4087\n0.0274\n-0.7968\n-0.0206\nTrue\n\n\n67\nLB\nLegume\n-1.5793\n0.0415\n-3.1323\n-0.0262\nTrue\n\n\n74\nLB\nRye\n-1.5863\n0.0473\n-3.1644\n-0.0081\nTrue\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n    \n      \n\n\n    \n        \n    \n\n      \n\n\n\n      \n    \n\n  \n    \n    \n\n  \n    \n  \n    \n    \n  \n\n    \n  \n\n\n\n# Plot significant differences\nplt.figure(figsize=(14, 6))\nsns.barplot(\n    data=significant_pairs,\n    x=\"group1\",\n    y=\"meandiff\",\n    hue=\"group2\",\n    dodge=True,\n    palette=\"tab10\"\n)\n\nplt.axhline(0, color=\"black\", linestyle=\"--\", linewidth=1)\nplt.xlabel(\"Group 1\", fontsize=12)\nplt.ylabel(\"Mean SOC Difference (%)\", fontsize=12)\nplt.title(\"Tukey HSD: Significant SOC Differences Between Cover Crop Groups\", fontsize=14)\nplt.xticks(rotation=45, ha='right')\nplt.legend(title=\"Group 2\", bbox_to_anchor=(1.05, 1), loc='upper left')\nplt.tight_layout()\nplt.grid(axis='y', linestyle=':', alpha=0.7)\nplt.show()"
  },
  {
    "objectID": "dashboard.html",
    "href": "dashboard.html",
    "title": "Soil Health Dashboard (Static Version)",
    "section": "",
    "text": "Conservation Plots\nimport pandas as pd import plot_modules.soil_plots as sp\ndf = pd.read_excel(“data/SoilHealthDB_V2.xlsx”) df_filtered = df.copy()\n\n\nExample plots\nsp.boxplot_soil_bd_by_conservation(df_filtered) sp.barplot_mean_sd_soil_bd(df_filtered)\n\n\nOptional: save as images if needed\n\n\nfig = sp.boxplot_soil_bd_by_conservation(df_filtered)\n\n\nfig.savefig(“plots/boxplot.png”)\nimport plot_modules.cover_crop_plots as cp\ndf_soc = df[[‘CoverCropGroup’, ‘BackgroundSOC’, ‘Country’]].dropna() df_soc[‘Country’] = df_soc[‘Country’].astype(str).str.strip().str.title()\ncp.boxplot_soc(df_soc) cp.barplot_country_freq(df_soc) cp.heatmap_soc_means(df_soc)\nimport plot_modules.soil_crop_yield_plots as scp\ndf_yield = scp.prepare_soil_crop_data(df.copy()) scp.plot_yield_by_soil_crop(df_yield) scp.plot_anova_cover_crop_effect(df_yield)"
  },
  {
    "objectID": "Deprecated/question_1.html",
    "href": "Deprecated/question_1.html",
    "title": "Summary Statistics",
    "section": "",
    "text": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom statsmodels.formula.api import ols\nfrom statsmodels.stats.anova import anova_lm\nfrom statsmodels.stats.multicomp import pairwise_tukeyhsd\nimport seaborn as sns\n# Load the Excel file\nfile_path = \"SoilHealthDB_V2.xlsx\"\nexcel_file = pd.ExcelFile(file_path)\n\n# Display all sheet names\nsheet_names = excel_file.sheet_names\n# print(sheet_names)\n# Load main dataset\nmain_df = excel_file.parse('Sheet1')\n\n# Display first few rows\nmain_df.head()\n\n\n\n\n\n\n\n\nStudyID\nExperimentID\nAuthor_F\nAuthor_G\nYearPublication\nSamplingYear\nJournal\nSiteInfor\nCountry\nLatitude\n...\nMBN_C_SD\nMBN_T_SD\n38.MBN_Comments\nMicroelement\nSQI\nESS\nTexture_C\nComments1\nComments2\nComments3\n\n\n\n\n0\n1\n1-1\nAbawi\nG.S.\n2000\nNaN\nApplied Soil Ecology\nNew York\nUSA\n40.71\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nRoot infected by rot\nNaN\nNaN\n\n\n1\n1\n1-1\nAbawi\nG.S.\n2000\nNaN\nApplied Soil Ecology\nNew York\nUSA\n40.71\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nRoot infected by rot\nNaN\nNaN\n\n\n2\n1\n1-2\nAbawi\nG.S.\n2000\nNaN\nApplied Soil Ecology\nNew York\nUSA\n40.71\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nRoot infected by rot\nNaN\nNaN\n\n\n3\n1\n1-1\nAbawi\nG.S.\n2000\nNaN\nApplied Soil Ecology\nNew York\nUSA\n40.71\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nRoot infected by rot\nNaN\nNaN\n\n\n4\n1\n1-4\nAbawi\nG.S.\n2000\nNaN\nApplied Soil Ecology\nNew York\nUSA\n40.71\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nRoot infected by rot\nNaN\nNaN\n\n\n\n\n5 rows × 270 columns\n# View first 40 column names to explore variables\nall_columns = main_df.columns.tolist()\nprint(all_columns[:40])\n\n['StudyID', 'ExperimentID', 'Author_F', 'Author_G', 'YearPublication', 'SamplingYear', 'Journal', 'SiteInfor', 'Country', 'Latitude', 'Longitude', 'Elevation', 'Tannual', 'MAT', 'Pannual', 'MAP', 'ClimateType', 'TimeAfterCoverCrop', 'Duration', 'CC_planting_date', 'CC_termination_date', 'Time_Comments', 'SamplingDepth', 'SamplingThickness', 'CEC', 'CEC_Unit', 'SoilBD', 'SandPerc', 'SiltPerc', 'ClayPerc', 'Texture', 'SoilpH', 'BackgroundSOC', 'SOC_NaturalVeg', 'SoilKsat', 'SoilFamily', 'CoverCrop', 'CoverCropGroup', 'GrainCrop', 'GrainCropGroup']\n# Select columns of interest\ncolumns_of_interest = [\n    # Geographic\n    'SiteInfor', 'Country', 'Latitude', 'Longitude', 'Elevation', 'ClimateType',\n    # Practices\n    'CoverCrop', 'CoverCropGroup', 'GrainCrop', 'GrainCropGroup',\n    # Soil health indicators\n    'SoilBD', 'SoilpH', 'CEC', 'MBN_C', 'MBN_T'\n]\n\n# Create subset\nsubset_df = main_df[columns_of_interest]\n\n# Summary overview of the subset\nprint(subset_df.describe(include='all'))\n\n                                                SiteInfor Country  \\\ncount                                                5853    5907   \nunique                                                367      42   \ntop     Agricultural Research Station farm, Fort Valle...     USA   \nfreq                                                  193    2272   \nmean                                                  NaN     NaN   \nstd                                                   NaN     NaN   \nmin                                                   NaN     NaN   \n25%                                                   NaN     NaN   \n50%                                                   NaN     NaN   \n75%                                                   NaN     NaN   \nmax                                                   NaN     NaN   \n\n           Latitude    Longitude    Elevation     ClimateType CoverCrop  \\\ncount   5884.000000  5884.000000  5497.000000              55      5051   \nunique          NaN          NaN          NaN               2       406   \ntop             NaN          NaN          NaN   Mediterranean       Rye   \nfreq            NaN          NaN          NaN              47       509   \nmean      24.820367    -9.268017   500.234570             NaN       NaN   \nstd       23.541664    81.177791   523.039669             NaN       NaN   \nmin      -43.760000  -123.260000     1.700000             NaN       NaN   \n25%        7.380000   -83.910000    55.300000             NaN       NaN   \n50%       35.390000     3.900000   250.000000             NaN       NaN   \n75%       40.716667    34.600000   988.000000             NaN       NaN   \nmax       60.700000   175.610000  2000.000000             NaN       NaN   \n\n       CoverCropGroup GrainCrop GrainCropGroup       SoilBD       SoilpH  \\\ncount            5062      5495           5616  1685.000000  2474.000000   \nunique             22       158             23          NaN          NaN   \ntop            Legume     Maize           Corn          NaN          NaN   \nfreq             2729      1357           1847          NaN          NaN   \nmean              NaN       NaN            NaN     1.361771     6.337566   \nstd               NaN       NaN            NaN     0.179632     1.138799   \nmin               NaN       NaN            NaN     0.760000     3.990000   \n25%               NaN       NaN            NaN     1.260000     5.400000   \n50%               NaN       NaN            NaN     1.370000     6.100000   \n75%               NaN       NaN            NaN     1.460000     7.500000   \nmax               NaN       NaN            NaN     2.696270     8.700000   \n\n               CEC       MBN_C       MBN_T  \ncount    53.000000  194.000000  194.000000  \nunique         NaN         NaN         NaN  \ntop            NaN         NaN         NaN  \nfreq           NaN         NaN         NaN  \nmean     32.076038   39.593624   50.257563  \nstd      40.168201   25.574672   34.353027  \nmin       3.350000    1.300000    1.500000  \n25%       8.730000   20.034800   21.943800  \n50%      18.800000   37.100000   47.200000  \n75%      29.500000   53.500000   75.315000  \nmax     171.000000  187.000000  247.000000\npd.set_option('display.max_columns', None)\n# Ensure SOC is included\nsubset_df.loc[:, 'SOC'] = main_df['BackgroundSOC']\n\n# Define indicators\nsoil_indicators = ['SoilBD', 'SoilpH', 'CEC', 'SOC', 'MBN_C', 'MBN_T']\n\n# Summary statistics by CoverCropGroup (per column, dropping NaNs)\nsummary_by_covercrop = subset_df.groupby('CoverCropGroup')[soil_indicators].agg(['count', 'mean', 'std', 'min', 'max'])\n\n# Summary statistics by Country (per column, dropping NaNs)\nsummary_by_country = subset_df.groupby('Country')[soil_indicators].agg(['count', 'mean', 'std', 'min', 'max'])\n\n# Display results\n# print(\"Summary by CoverCropGroup:\\n\", summary_by_covercrop)\n# print(\"\\nSummary by Country:\\n\", summary_by_country)\n\nsummary_by_covercrop.head()\nsummary_by_country.head(50)\n\n\n\n\n\n\n\n\n\nSoilBD\nSoilpH\nCEC\nSOC\nMBN_C\nMBN_T\n\n\n\ncount\nmean\nstd\nmin\nmax\ncount\nmean\nstd\nmin\nmax\ncount\nmean\nstd\nmin\nmax\ncount\nmean\nstd\nmin\nmax\ncount\nmean\nstd\nmin\nmax\ncount\nmean\nstd\nmin\nmax\n\n\nCountry\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nArgentina\n64\n1.214167\n0.099462\n1.130000\n1.46000\n6\n6.000000\n0.000000\n6.000000\n6.00\n0\nNaN\nNaN\nNaN\nNaN\n8\n2.527500\n0.235175\n2.300000\n2.800000\n0\nNaN\nNaN\nNaN\nNaN\n0\nNaN\nNaN\nNaN\nNaN\n\n\nAustralia\n0\nNaN\nNaN\nNaN\nNaN\n8\n5.775000\n0.520302\n5.400000\n6.60\n2\n4.550000\n0.212132\n4.40\n4.70\n8\n0.995000\n0.257516\n0.600000\n1.190000\n0\nNaN\nNaN\nNaN\nNaN\n0\nNaN\nNaN\nNaN\nNaN\n\n\nBangladesh\n0\nNaN\nNaN\nNaN\nNaN\n0\nNaN\nNaN\nNaN\nNaN\n0\nNaN\nNaN\nNaN\nNaN\n0\nNaN\nNaN\nNaN\nNaN\n0\nNaN\nNaN\nNaN\nNaN\n0\nNaN\nNaN\nNaN\nNaN\n\n\nBenin\n0\nNaN\nNaN\nNaN\nNaN\n4\n5.250000\n0.404145\n4.900000\n5.60\n0\nNaN\nNaN\nNaN\nNaN\n0\nNaN\nNaN\nNaN\nNaN\n0\nNaN\nNaN\nNaN\nNaN\n0\nNaN\nNaN\nNaN\nNaN\n\n\nBrazil\n39\n1.270103\n0.172382\n0.989000\n1.50000\n25\n5.080800\n0.750805\n4.500000\n6.31\n0\nNaN\nNaN\nNaN\nNaN\n17\n1.730729\n0.984797\n0.812000\n3.612000\n0\nNaN\nNaN\nNaN\nNaN\n0\nNaN\nNaN\nNaN\nNaN\n\n\nCameroon\n0\nNaN\nNaN\nNaN\nNaN\n22\n5.181818\n0.113961\n5.000000\n5.25\n0\nNaN\nNaN\nNaN\nNaN\n16\n1.800000\n0.103280\n1.700000\n1.900000\n0\nNaN\nNaN\nNaN\nNaN\n0\nNaN\nNaN\nNaN\nNaN\n\n\nCanada\n104\n1.504839\n0.123546\n1.289758\n1.69000\n22\n6.795455\n1.126933\n5.000000\n7.60\n0\nNaN\nNaN\nNaN\nNaN\n28\n3.296000\n1.376452\n1.672000\n4.466000\n0\nNaN\nNaN\nNaN\nNaN\n0\nNaN\nNaN\nNaN\nNaN\n\n\nChina\n315\n1.270389\n0.104592\n1.080000\n1.47000\n510\n6.912627\n1.278658\n3.990000\n8.30\n2\n13.480000\n1.159655\n12.66\n14.30\n636\n2.170725\n1.535821\n0.260000\n6.100000\n42\n44.152381\n20.963508\n1.30\n76.85\n42\n52.359048\n24.180159\n3.00\n115.06\n\n\nCosta Rica\n0\nNaN\nNaN\nNaN\nNaN\n0\nNaN\nNaN\nNaN\nNaN\n0\nNaN\nNaN\nNaN\nNaN\n0\nNaN\nNaN\nNaN\nNaN\n0\nNaN\nNaN\nNaN\nNaN\n0\nNaN\nNaN\nNaN\nNaN\n\n\nDenmark\n32\n1.364238\n0.047516\n1.330300\n1.54000\n44\n6.397727\n0.199405\n6.100000\n7.10\n4\n129.750000\n21.328776\n110.00\n160.00\n57\n2.159930\n0.663736\n1.280000\n3.100000\n24\n30.500000\n3.162278\n27.00\n36.00\n24\n37.791667\n6.379172\n27.00\n53.00\n\n\nEngland\n2\n0.930000\n0.169706\n0.810000\n1.05000\n2\n7.550000\n0.070711\n7.500000\n7.60\n3\n15.070000\n6.101008\n8.73\n20.90\n5\n2.092419\n0.636923\n1.511628\n3.093023\n0\nNaN\nNaN\nNaN\nNaN\n0\nNaN\nNaN\nNaN\nNaN\n\n\nFrance\n14\n1.222857\n0.175035\n1.000000\n1.52000\n20\n6.900000\n0.263579\n6.200000\n7.20\n0\nNaN\nNaN\nNaN\nNaN\n12\n1.160000\n0.000000\n1.160000\n1.160000\n1\n100.000000\nNaN\n100.00\n100.00\n1\n130.000000\nNaN\n130.00\n130.00\n\n\nGermany\n26\n1.449478\n0.095068\n1.300000\n1.64000\n6\n6.033333\n0.051640\n6.000000\n6.10\n0\nNaN\nNaN\nNaN\nNaN\n9\n1.518918\n1.223361\n0.686525\n3.150000\n3\n1.666667\n0.288675\n1.50\n2.00\n3\n1.766667\n0.251661\n1.50\n2.00\n\n\nGhana\n0\nNaN\nNaN\nNaN\nNaN\n20\n4.917000\n0.230380\n4.770000\n5.26\n6\n3.505000\n0.169794\n3.35\n3.66\n20\n0.556000\n0.056419\n0.520000\n0.640000\n0\nNaN\nNaN\nNaN\nNaN\n0\nNaN\nNaN\nNaN\nNaN\n\n\nGreece\n3\n1.490000\n0.000000\n1.490000\n1.49000\n7\n7.724286\n0.331404\n7.370000\n7.99\n0\nNaN\nNaN\nNaN\nNaN\n0\nNaN\nNaN\nNaN\nNaN\n7\n43.142857\n25.122557\n23.00\n70.00\n7\n44.428571\n37.464904\n13.00\n100.00\n\n\nGuinea\n0\nNaN\nNaN\nNaN\nNaN\n0\nNaN\nNaN\nNaN\nNaN\n0\nNaN\nNaN\nNaN\nNaN\n0\nNaN\nNaN\nNaN\nNaN\n0\nNaN\nNaN\nNaN\nNaN\n0\nNaN\nNaN\nNaN\nNaN\n\n\nIndia\n0\nNaN\nNaN\nNaN\nNaN\n0\nNaN\nNaN\nNaN\nNaN\n0\nNaN\nNaN\nNaN\nNaN\n0\nNaN\nNaN\nNaN\nNaN\n0\nNaN\nNaN\nNaN\nNaN\n0\nNaN\nNaN\nNaN\nNaN\n\n\nIndonesia\n0\nNaN\nNaN\nNaN\nNaN\n7\n4.455714\n0.616654\n4.000000\n5.75\n0\nNaN\nNaN\nNaN\nNaN\n7\n3.222857\n0.667551\n2.290000\n4.010000\n0\nNaN\nNaN\nNaN\nNaN\n0\nNaN\nNaN\nNaN\nNaN\n\n\nItaly\n24\n1.442500\n0.035661\n1.400000\n1.48000\n52\n8.063077\n0.323907\n6.900000\n8.40\n1\n23.000000\nNaN\n23.00\n23.00\n15\n0.804000\n0.218209\n0.390000\n0.950000\n2\n44.950000\n22.839549\n28.80\n61.10\n2\n54.800000\n37.900923\n28.00\n81.60\n\n\nKenya\n0\nNaN\nNaN\nNaN\nNaN\n100\n5.433000\n0.167003\n5.000000\n5.70\n0\nNaN\nNaN\nNaN\nNaN\n100\n1.387490\n0.621590\n0.140000\n1.790000\n0\nNaN\nNaN\nNaN\nNaN\n0\nNaN\nNaN\nNaN\nNaN\n\n\nMalawi\n33\n1.300000\n0.082916\n1.200000\n1.40000\n183\n5.913005\n0.252365\n5.300000\n6.50\n0\nNaN\nNaN\nNaN\nNaN\n180\n1.176978\n0.475998\n0.585000\n2.110000\n0\nNaN\nNaN\nNaN\nNaN\n0\nNaN\nNaN\nNaN\nNaN\n\n\nNetherland\n0\nNaN\nNaN\nNaN\nNaN\n8\n7.947500\n1.071977\n5.460000\n8.46\n0\nNaN\nNaN\nNaN\nNaN\n6\n0.893200\n0.000000\n0.893200\n0.893200\n0\nNaN\nNaN\nNaN\nNaN\n0\nNaN\nNaN\nNaN\nNaN\n\n\nNew Zealand\n7\n1.070000\n0.000000\n1.070000\n1.07000\n7\n6.100000\n0.000000\n6.100000\n6.10\n7\n19.742857\n6.810251\n7.80\n28.50\n7\n4.840000\n0.000000\n4.840000\n4.840000\n14\n62.071429\n12.206331\n50.00\n86.00\n14\n75.857143\n23.260588\n27.00\n120.00\n\n\nNigeria\n86\n1.306744\n0.014828\n1.240000\n1.31000\n281\n7.256940\n0.867354\n4.400000\n7.80\n4\n7.180000\n1.004589\n6.31\n8.05\n357\n1.733894\n0.579176\n0.570000\n2.170000\n0\nNaN\nNaN\nNaN\nNaN\n0\nNaN\nNaN\nNaN\nNaN\n\n\nNorway\n0\nNaN\nNaN\nNaN\nNaN\n0\nNaN\nNaN\nNaN\nNaN\n0\nNaN\nNaN\nNaN\nNaN\n0\nNaN\nNaN\nNaN\nNaN\n4\n41.050000\n4.884329\n36.70\n46.60\n4\n51.600000\n2.655811\n49.30\n53.90\n\n\nPeru\n0\nNaN\nNaN\nNaN\nNaN\n0\nNaN\nNaN\nNaN\nNaN\n0\nNaN\nNaN\nNaN\nNaN\n0\nNaN\nNaN\nNaN\nNaN\n0\nNaN\nNaN\nNaN\nNaN\n0\nNaN\nNaN\nNaN\nNaN\n\n\nPhilippines\n0\nNaN\nNaN\nNaN\nNaN\n0\nNaN\nNaN\nNaN\nNaN\n0\nNaN\nNaN\nNaN\nNaN\n0\nNaN\nNaN\nNaN\nNaN\n0\nNaN\nNaN\nNaN\nNaN\n0\nNaN\nNaN\nNaN\nNaN\n\n\nPoland\n0\nNaN\nNaN\nNaN\nNaN\n0\nNaN\nNaN\nNaN\nNaN\n0\nNaN\nNaN\nNaN\nNaN\n0\nNaN\nNaN\nNaN\nNaN\n0\nNaN\nNaN\nNaN\nNaN\n0\nNaN\nNaN\nNaN\nNaN\n\n\nRepublic of Moldova\n0\nNaN\nNaN\nNaN\nNaN\n2\n6.100000\n0.000000\n6.100000\n6.10\n0\nNaN\nNaN\nNaN\nNaN\n0\nNaN\nNaN\nNaN\nNaN\n0\nNaN\nNaN\nNaN\nNaN\n0\nNaN\nNaN\nNaN\nNaN\n\n\nRussia\n0\nNaN\nNaN\nNaN\nNaN\n0\nNaN\nNaN\nNaN\nNaN\n0\nNaN\nNaN\nNaN\nNaN\n0\nNaN\nNaN\nNaN\nNaN\n0\nNaN\nNaN\nNaN\nNaN\n0\nNaN\nNaN\nNaN\nNaN\n\n\nRwanda\n0\nNaN\nNaN\nNaN\nNaN\n0\nNaN\nNaN\nNaN\nNaN\n0\nNaN\nNaN\nNaN\nNaN\n0\nNaN\nNaN\nNaN\nNaN\n0\nNaN\nNaN\nNaN\nNaN\n0\nNaN\nNaN\nNaN\nNaN\n\n\nSouth Korea\n2\n1.200000\n0.000000\n1.200000\n1.20000\n6\n6.333333\n0.206559\n6.200000\n6.60\n0\nNaN\nNaN\nNaN\nNaN\n6\n1.876667\n0.253035\n1.550000\n2.040000\n0\nNaN\nNaN\nNaN\nNaN\n0\nNaN\nNaN\nNaN\nNaN\n\n\nSpain\n8\n1.270000\n0.074833\n1.200000\n1.34000\n58\n7.989885\n0.244408\n7.853333\n8.70\n3\n125.333333\n44.545857\n82.00\n171.00\n60\n1.368220\n1.511281\n0.759800\n7.900000\n0\nNaN\nNaN\nNaN\nNaN\n0\nNaN\nNaN\nNaN\nNaN\n\n\nSweden\n1\n1.360000\nNaN\n1.360000\n1.36000\n0\nNaN\nNaN\nNaN\nNaN\n0\nNaN\nNaN\nNaN\nNaN\n0\nNaN\nNaN\nNaN\nNaN\n0\nNaN\nNaN\nNaN\nNaN\n0\nNaN\nNaN\nNaN\nNaN\n\n\nSwitzerland\n0\nNaN\nNaN\nNaN\nNaN\n0\nNaN\nNaN\nNaN\nNaN\n0\nNaN\nNaN\nNaN\nNaN\n0\nNaN\nNaN\nNaN\nNaN\n0\nNaN\nNaN\nNaN\nNaN\n0\nNaN\nNaN\nNaN\nNaN\n\n\nTanzania\n0\nNaN\nNaN\nNaN\nNaN\n43\n6.737209\n0.998337\n5.900000\n7.90\n0\nNaN\nNaN\nNaN\nNaN\n43\n1.297674\n0.599002\n0.600000\n1.800000\n0\nNaN\nNaN\nNaN\nNaN\n0\nNaN\nNaN\nNaN\nNaN\n\n\nTogo\n0\nNaN\nNaN\nNaN\nNaN\n58\n5.906897\n0.140003\n5.700000\n6.00\n0\nNaN\nNaN\nNaN\nNaN\n40\n0.800000\n0.000000\n0.800000\n0.800000\n0\nNaN\nNaN\nNaN\nNaN\n0\nNaN\nNaN\nNaN\nNaN\n\n\nTurkey\n0\nNaN\nNaN\nNaN\nNaN\n41\n6.888780\n0.360390\n6.700000\n7.56\n0\nNaN\nNaN\nNaN\nNaN\n41\n2.115854\n0.733352\n0.750000\n2.500000\n0\nNaN\nNaN\nNaN\nNaN\n0\nNaN\nNaN\nNaN\nNaN\n\n\nUSA\n868\n1.392644\n0.197964\n0.760000\n2.69627\n461\n6.443004\n0.707495\n5.344444\n8.30\n21\n24.419524\n7.513420\n9.90\n34.60\n415\n1.250704\n0.668401\n0.470000\n4.508772\n97\n36.749104\n29.374506\n4.41\n187.00\n97\n49.686467\n40.712847\n7.56\n247.00\n\n\nUganda\n0\nNaN\nNaN\nNaN\nNaN\n96\n5.216667\n0.168377\n4.800000\n5.60\n0\nNaN\nNaN\nNaN\nNaN\n96\n2.835417\n0.493106\n2.100000\n5.600000\n0\nNaN\nNaN\nNaN\nNaN\n0\nNaN\nNaN\nNaN\nNaN\n\n\nZambia\n57\n1.504386\n0.186739\n1.180000\n1.61000\n342\n5.144620\n0.382607\n4.350000\n5.60\n0\nNaN\nNaN\nNaN\nNaN\n380\n0.779526\n0.270713\n0.400000\n1.400000\n0\nNaN\nNaN\nNaN\nNaN\n0\nNaN\nNaN\nNaN\nNaN\n\n\nZimbabwe\n0\nNaN\nNaN\nNaN\nNaN\n33\n4.745455\n0.117502\n4.500000\n4.80\n0\nNaN\nNaN\nNaN\nNaN\n33\n0.492727\n0.015667\n0.460000\n0.500000\n0\nNaN\nNaN\nNaN\nNaN\n0\nNaN\nNaN\nNaN\nNaN\ncover_crop_map = {\n    'No': 'None',\n    'Not_available': 'None',\n    'Legume': 'Legume',\n    'Grass': 'Grass',\n    'Brassica': 'Brassica',\n    'Mixed': 'Mixed',\n    'Broadleaf': 'Other',\n    'Broadleaf/Brassica': 'Other',\n    'LB': 'Mixed',\n    'LG': 'Mixed',\n    'LL': 'Mixed',\n    'MMT': 'Other',\n    'MOT': 'Other',\n    'GG': 'Grass',\n    'LT': 'Legume',\n    'Legume_Tree': 'Legume',\n    'Rye': 'Grass',\n    'M': 'Mixed',\n    'Other': 'Other'\n}\n\nmain_df['CoverCropGroup_clean'] = main_df['CoverCropGroup'].map(cover_crop_map).fillna('Other')\ndef simplify_tillage(value):\n    if pd.isna(value):\n        return 'Unknown'\n    value = str(value).lower()\n    if 'no' in value or 'nt' in value:\n        return 'No-till'\n    elif 'reduced' in value or 'minimum' in value or 'strip' in value:\n        return 'Reduced-till'\n    elif 'conventional' in value or 'moldboard' in value or 'intensive' in value:\n        return 'Conventional'\n    else:\n        return 'Other'\n\nmain_df['Tillage_clean'] = main_df['Tillage_Top_T'].apply(simplify_tillage)"
  },
  {
    "objectID": "Deprecated/question_1.html#inferential-statistics",
    "href": "Deprecated/question_1.html#inferential-statistics",
    "title": "Summary Statistics",
    "section": "Inferential statistics",
    "text": "Inferential statistics\n\nimport scipy.stats as stats\n\n# Define the soil indicators to test\nindicators = ['SoilBD', 'SoilpH', 'CEC', 'SOC', 'MBN_T']\n\n# Create a function to perform one-way ANOVA for each indicator\ndef run_anova(df, group_col, indicators):\n    results = {}\n    for indicator in indicators:\n        # Drop NaNs for the current indicator\n        data = df[[group_col, indicator]].dropna()\n        # Group the data by the group_col\n        groups = [group[indicator].values for name, group in data.groupby(group_col)]\n        if len(groups) &gt; 1:\n            stat, pval = stats.f_oneway(*groups)\n            results[indicator] = {'F-statistic': stat, 'p-value': pval}\n        else:\n            results[indicator] = {'F-statistic': None, 'p-value': None}\n    return results\n\n# Run ANOVA for CoverCropGroup\nanova_results = run_anova(subset_df, 'CoverCropGroup', indicators)\n\n# Print results\nfor var, res in anova_results.items():\n    print(f\"{var}: F = {res['F-statistic']:.3f}, p = {res['p-value']:.4f}\")\n\nSoilBD: F = 2.922, p = 0.0002\nSoilpH: F = 11.338, p = 0.0000\nCEC: F = 1.503, p = 0.2282\nSOC: F = 43.451, p = 0.0000\nMBN_T: F = 4.599, p = 0.0000\n\n\n\nTukey’s HSD test - identify which specific cover crop groups differ (post hoc analysis after ANOVA).\n\nfrom statsmodels.stats.multicomp import pairwise_tukeyhsd\nimport pandas as pd\n\n# Drop missing values for SOC and CoverCropGroup\ntukey_data = subset_df[['SOC', 'CoverCropGroup']].dropna()\n\n# Run Tukey HSD\ntukey_result = pairwise_tukeyhsd(endog=tukey_data['SOC'],\n                                 groups=tukey_data['CoverCropGroup'],\n                                 alpha=0.05)\n\n# Print results\nprint(tukey_result.summary())\n\n            Multiple Comparison of Means - Tukey HSD, FWER=0.05             \n============================================================================\n      group1             group2       meandiff p-adj   lower   upper  reject\n----------------------------------------------------------------------------\n               AVG           Brassica   0.1037    1.0 -0.6314  0.8388  False\n               AVG          Broadleaf    -0.15    1.0 -0.9876  0.6876  False\n               AVG Broadleaf/Brassica  -1.4196 0.9781 -4.5855  1.7462  False\n               AVG              Grass   1.0581    0.0  0.4005  1.7157   True\n               AVG                 LB   1.3194 0.3301 -0.3558  2.9946  False\n               AVG                 LG  -0.0792    1.0  -0.799  0.6407  False\n               AVG                 LL  -0.6939 0.0742 -1.4148   0.027  False\n               AVG             Legume  -0.2599 0.9914 -0.8982  0.3784  False\n               AVG        Legume_Tree   0.1418    1.0 -0.5411  0.8247  False\n               AVG                MMT  -0.4206 0.9954 -1.5173  0.6761  False\n               AVG                MOT   0.3669 0.9944 -0.5722   1.306  False\n               AVG              Mixed  -0.6103 0.7712 -1.6114  0.3908  False\n               AVG                 No   1.3386 0.0012  0.2954  2.3817   True\n               AVG      Not_available   0.5094    1.0 -1.7735  2.7923  False\n               AVG                Rye  -0.2669 0.9955  -0.964  0.4303  False\n          Brassica          Broadleaf  -0.2537 0.9955 -0.9171  0.4097  False\n          Brassica Broadleaf/Brassica  -1.5233 0.9539 -4.6476  1.6009  False\n          Brassica              Grass   0.9543    0.0  0.5408  1.3678   True\n          Brassica                 LB   1.2157 0.3893 -0.3796  2.8109  False\n          Brassica                 LG  -0.1829 0.9976 -0.6896  0.3239  False\n          Brassica                 LL  -0.7977    0.0 -1.3058 -0.2895   True\n          Brassica             Legume  -0.3636 0.0828 -0.7456  0.0184  False\n          Brassica        Legume_Tree   0.0381    1.0 -0.4145  0.4908  False\n          Brassica                MMT  -0.5243 0.8962 -1.4945  0.4458  False\n          Brassica                MOT   0.2632  0.999 -0.5246  1.0509  False\n          Brassica              Mixed   -0.714 0.2441 -1.5747  0.1467  False\n          Brassica                 No   1.2349 0.0004  0.3256  2.1441   True\n          Brassica      Not_available   0.4057    1.0 -1.8193  2.6306  False\n          Brassica                Rye  -0.3706 0.3427 -0.8445  0.1033  False\n         Broadleaf Broadleaf/Brassica  -1.2696 0.9923 -4.4196  1.8803  False\n         Broadleaf              Grass   1.2081    0.0  0.6317  1.7844   True\n         Broadleaf                 LB   1.4694 0.1442 -0.1756  3.1144  False\n         Broadleaf                 LG   0.0708    1.0 -0.5757  0.7174  False\n         Broadleaf                 LL  -0.5439 0.2255 -1.1916  0.1037  False\n         Broadleaf             Legume  -0.1099    1.0 -0.6641  0.4444  False\n         Broadleaf        Legume_Tree   0.2918  0.958 -0.3133  0.8969  False\n         Broadleaf                MMT  -0.2706    1.0 -1.3206  0.7794  False\n         Broadleaf                MOT   0.5169 0.8227 -0.3673  1.4011  False\n         Broadleaf              Mixed  -0.4603 0.9562 -1.4101  0.4894  False\n         Broadleaf                 No   1.4886    0.0  0.4946  2.4825   True\n         Broadleaf      Not_available   0.6594 0.9998 -1.6015  2.9202  False\n         Broadleaf                Rye  -0.1169    1.0  -0.738  0.5043  False\nBroadleaf/Brassica              Grass   2.4777 0.3085 -0.6293  5.5846  False\nBroadleaf/Brassica                 LB    2.739 0.3252  -0.729   6.207  False\nBroadleaf/Brassica                 LG   1.3405 0.9854 -1.7803  4.4612  False\nBroadleaf/Brassica                 LL   0.7257    1.0 -2.3953  3.8466  False\nBroadleaf/Brassica             Legume   1.1597 0.9965 -1.9432  4.2627  False\nBroadleaf/Brassica        Legume_Tree   1.5614 0.9416  -1.551  4.6739  False\nBroadleaf/Brassica                MMT    0.999 0.9996 -2.2295  4.2275  False\nBroadleaf/Brassica                MOT   1.7865 0.8631  -1.392   4.965  False\nBroadleaf/Brassica              Mixed   0.8093    1.0  -2.388  4.0066  False\nBroadleaf/Brassica                 No   2.7582 0.1933 -0.4525  5.9689  False\nBroadleaf/Brassica      Not_available    1.929 0.9356   -1.87   5.728  False\nBroadleaf/Brassica                Rye   1.1527 0.9969 -1.9628  4.2683  False\n             Grass                 LB   0.2613    1.0 -1.2998  1.8224  False\n             Grass                 LG  -1.1372    0.0 -1.5231 -0.7514   True\n             Grass                 LL   -1.752    0.0 -2.1397 -1.3643   True\n             Grass             Legume  -1.3179    0.0  -1.513 -1.1229   True\n             Grass        Legume_Tree  -0.9162    0.0 -1.2277 -0.6048   True\n             Grass                MMT  -1.4787    0.0 -2.3916 -0.5658   True\n             Grass                MOT  -0.6912 0.0721 -1.4071  0.0248  False\n             Grass              Mixed  -1.6684    0.0 -2.4639 -0.8728   True\n             Grass                 No   0.2805 0.9991 -0.5673  1.1283  False\n             Grass      Not_available  -0.5487    1.0 -2.7492  1.6519  False\n             Grass                Rye  -1.3249    0.0 -1.6665 -0.9833   True\n                LB                 LG  -1.3985 0.1612 -2.9869  0.1898  False\n                LB                 LL  -2.0133 0.0016 -3.6021 -0.4246   True\n                LB             Legume  -1.5793 0.0415 -3.1323 -0.0262   True\n                LB        Legume_Tree  -1.1776 0.4208 -2.7494  0.3943  False\n                LB                MMT    -1.74 0.0676 -3.5309  0.0509  False\n                LB                MOT  -0.9525 0.8655 -2.6515  0.7465  False\n                LB              Mixed  -1.9297 0.0132 -3.6637 -0.1957   True\n                LB                 No   0.0192    1.0 -1.7394  1.7778  False\n                LB      Not_available    -0.81 0.9997 -3.4963  1.8763  False\n                LB                Rye  -1.5863 0.0473 -3.1644 -0.0081   True\n                LG                 LL  -0.6148 0.0016 -1.1007 -0.1289   True\n                LG             Legume  -0.1807 0.9296 -0.5326  0.1712  False\n                LG        Legume_Tree    0.221 0.9259 -0.2066  0.6485  False\n                LG                MMT  -0.3415 0.9979 -1.3002  0.6173  False\n                LG                MOT    0.446 0.8377 -0.3275  1.2196  False\n                LG              Mixed  -0.5312 0.7329 -1.3789  0.3166  False\n                LG                 No   1.4177    0.0  0.5207  2.3147   True\n                LG      Not_available   0.5885 0.9999 -1.6314  2.8085  False\n                LG                Rye  -0.1877  0.989 -0.6377  0.2623  False\n                LL             Legume   0.4341 0.0028  0.0801   0.788   True\n                LL        Legume_Tree   0.8358    0.0  0.4065   1.265   True\n                LL                MMT   0.2733 0.9999 -0.6862  1.2328  False\n                LL                MOT   1.0608 0.0003  0.2863  1.8353   True\n                LL              Mixed   0.0836    1.0  -0.765  0.9322  False\n                LL                 No   2.0325    0.0  1.1347  2.9303   True\n                LL      Not_available   1.2033 0.8941 -1.0169  3.4236  False\n                LL                Rye   0.4271 0.0879 -0.0245  0.8787  False\n            Legume        Legume_Tree   0.4017    0.0  0.1335    0.67   True\n            Legume                MMT  -0.1607    1.0 -1.0598  0.7383  False\n            Legume                MOT   0.6268 0.1386 -0.0715  1.3251  False\n            Legume              Mixed  -0.3504 0.9776 -1.1301  0.4292  False\n            Legume                 No   1.5985    0.0  0.7655  2.4314   True\n            Legume      Not_available   0.7693 0.9983 -1.4256  2.9641  False\n            Legume                Rye   -0.007    1.0 -0.3097  0.2958  False\n       Legume_Tree                MMT  -0.5624 0.7834 -1.4937  0.3688  False\n       Legume_Tree                MOT   0.2251 0.9997 -0.5142  0.9643  False\n       Legume_Tree              Mixed  -0.7521 0.1116 -1.5687  0.0644  False\n       Legume_Tree                 No   1.1967 0.0003  0.3292  2.0643   True\n       Legume_Tree      Not_available   0.3676    1.0 -1.8407  2.5758  False\n       Legume_Tree                Rye  -0.4087 0.0274 -0.7968 -0.0206   True\n               MMT                MOT   0.7875 0.5595 -0.3451  1.9202  False\n               MMT              Mixed  -0.1897    1.0 -1.3742  0.9949  False\n               MMT                 No   1.7592 0.0001  0.5389  2.9795   True\n               MMT      Not_available     0.93 0.9941 -1.4391  3.2991  False\n               MMT                Rye   0.1537    1.0  -0.788  1.0955  False\n               MOT              Mixed  -0.9772 0.0937 -2.0176  0.0632  False\n               MOT                 No   0.9717 0.1369 -0.1092  2.0526  False\n               MOT      Not_available   0.1425    1.0 -2.1579  2.4429  False\n               MOT                Rye  -0.6338 0.2213 -1.3863  0.1187  False\n             Mixed                 No   1.9489    0.0  0.8137  3.0841   True\n             Mixed      Not_available   1.1197 0.9587 -1.2067  3.4461  False\n             Mixed                Rye   0.3434 0.9897 -0.4851   1.172  False\n                No      Not_available  -0.8292 0.9981  -3.174  1.5156  False\n                No                Rye  -1.6055    0.0 -2.4843 -0.7266   True\n     Not_available                Rye  -0.7763 0.9983 -2.9889  1.4364  False\n----------------------------------------------------------------------------\n\n\n\n\nRegression Analysis - models soil indicators (like SOC) while controlling for geography (e.g., latitude, climate, etc.).\n\\[\nSOC = \\beta_0 + \\beta_1 \\cdot \\text{CoverCropGroup} + \\beta_2 \\cdot \\text{Latitude} + \\beta_3 \\cdot \\text{Elevation} + \\epsilon\n\\]\n\nimport statsmodels.formula.api as smf\n\n# Prepare data\nreg_df = subset_df[['SOC', 'CoverCropGroup', 'Latitude', 'Elevation']].dropna()\n\n# Run linear regression\nmodel = smf.ols('SOC ~ C(CoverCropGroup) + Latitude + Elevation', data=reg_df).fit()\n\n# Show results\nprint(model.summary())\n\n                            OLS Regression Results                            \n==============================================================================\nDep. Variable:                    SOC   R-squared:                       0.246\nModel:                            OLS   Adj. R-squared:                  0.240\nMethod:                 Least Squares   F-statistic:                     45.66\nDate:                Fri, 11 Jul 2025   Prob (F-statistic):          2.95e-132\nTime:                        20:55:47   Log-Likelihood:                -3107.8\nNo. Observations:                2400   AIC:                             6252.\nDf Residuals:                    2382   BIC:                             6356.\nDf Model:                          17                                         \nCovariance Type:            nonrobust                                         \n===========================================================================================================\n                                              coef    std err          t      P&gt;|t|      [0.025      0.975]\n-----------------------------------------------------------------------------------------------------------\nIntercept                                   1.4288      0.188      7.600      0.000       1.060       1.797\nC(CoverCropGroup)[T.Brassica]               0.2776      0.211      1.314      0.189      -0.137       0.692\nC(CoverCropGroup)[T.Broadleaf]              0.1967      0.242      0.812      0.417      -0.278       0.672\nC(CoverCropGroup)[T.Broadleaf/Brassica]    -0.8828      0.907     -0.974      0.330      -2.661       0.895\nC(CoverCropGroup)[T.Grass]                  1.1028      0.189      5.844      0.000       0.733       1.473\nC(CoverCropGroup)[T.LB]                     1.3971      0.479      2.917      0.004       0.458       2.336\nC(CoverCropGroup)[T.LG]                    -0.0663      0.206     -0.322      0.748      -0.470       0.338\nC(CoverCropGroup)[T.LL]                    -0.3076      0.212     -1.453      0.146      -0.723       0.107\nC(CoverCropGroup)[T.Legume]                 0.0661      0.186      0.356      0.722      -0.298       0.430\nC(CoverCropGroup)[T.Legume_Tree]            0.4306      0.200      2.155      0.031       0.039       0.822\nC(CoverCropGroup)[T.MMT]                   -0.4994      0.314     -1.593      0.111      -1.114       0.116\nC(CoverCropGroup)[T.MOT]                    0.3804      0.268      1.417      0.157      -0.146       0.907\nC(CoverCropGroup)[T.Mixed]                 -0.5867      0.287     -2.048      0.041      -1.149      -0.025\nC(CoverCropGroup)[T.No]                     1.5098      0.299      5.052      0.000       0.924       2.096\nC(CoverCropGroup)[T.Not_available]          0.7292      0.653      1.117      0.264      -0.551       2.010\nC(CoverCropGroup)[T.Rye]                   -0.2206      0.200     -1.106      0.269      -0.612       0.171\nLatitude                                    0.0048      0.001      4.685      0.000       0.003       0.007\nElevation                                  -0.0003   4.52e-05     -6.003      0.000      -0.000      -0.000\n==============================================================================\nOmnibus:                      684.451   Durbin-Watson:                   0.302\nProb(Omnibus):                  0.000   Jarque-Bera (JB):             1962.291\nSkew:                           1.477   Prob(JB):                         0.00\nKurtosis:                       6.302   Cond. No.                     4.20e+04\n==============================================================================\n\nNotes:\n[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n[2] The condition number is large, 4.2e+04. This might indicate that there are\nstrong multicollinearity or other numerical problems.\n\n\n\n\nBoxplots with Significance Markers - visuals showing group means and marking pairs with significant differences.\n\nimport scikit_posthocs as sp\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Tukey HSD using scikit-posthocs\nsoc_data = subset_df[['CoverCropGroup', 'SOC']].dropna()\ntukey_letters = sp.posthoc_tukey(soc_data, val_col='SOC', group_col='CoverCropGroup', sort=True)\n\n# Create boxplot\nplt.figure(figsize=(12, 6))\nax = sns.boxplot(data=soc_data, x='CoverCropGroup', y='SOC')\nax.set_title('SOC by Cover Crop Group with Tukey HSD Groupings')\nplt.xticks(rotation=45)\nplt.tight_layout()\nplt.show()\n\n# Display grouping letters\nprint(\"\\nTukey HSD Groupings:\\n\")\nprint(tukey_letters)\n\n\n\n\n\n\n\n\n\nTukey HSD Groupings:\n\n                         AVG      Brassica     Broadleaf  Broadleaf/Brassica  \\\nAVG                 1.000000  1.000000e+00  9.999997e-01            0.978061   \nBrassica            1.000000  1.000000e+00  9.955310e-01            0.953886   \nBroadleaf           1.000000  9.955310e-01  1.000000e+00            0.992263   \nBroadleaf/Brassica  0.978061  9.538857e-01  9.922631e-01            1.000000   \nGrass               0.000004  3.390621e-13  1.046002e-10            0.308548   \nLB                  0.330089  3.892789e-01  1.441518e-01            0.325228   \nLG                  1.000000  9.976211e-01  1.000000e+00            0.985414   \nLL                  0.074183  9.430263e-06  2.254724e-01            0.999989   \nLegume              0.991425  8.280944e-02  9.999988e-01            0.996508   \nLegume_Tree         0.999998  1.000000e+00  9.579748e-01            0.941589   \nMMT                 0.995393  8.962296e-01  9.999592e-01            0.999600   \nMOT                 0.994401  9.990087e-01  8.226694e-01            0.863131   \nMixed               0.771158  2.441072e-01  9.561657e-01            0.999968   \nNo                  0.001221  3.778758e-04  3.522957e-05            0.193250   \nNot_available       0.999994  9.999996e-01  9.998055e-01            0.935627   \nRye                 0.995487  3.426549e-01  9.999994e-01            0.996872   \n\n                           Grass        LB        LG            LL  \\\nAVG                 4.482814e-06  0.330089  1.000000  7.418287e-02   \nBrassica            3.390621e-13  0.389279  0.997621  9.430263e-06   \nBroadleaf           1.046002e-10  0.144152  1.000000  2.254724e-01   \nBroadleaf/Brassica  3.085484e-01  0.325228  0.985414  9.999894e-01   \nGrass               1.000000e+00  1.000000  0.000000  0.000000e+00   \nLB                  9.999999e-01  1.000000  0.161193  1.552732e-03   \nLG                  0.000000e+00  0.161193  1.000000  1.600530e-03   \nLL                  0.000000e+00  0.001553  0.001601  1.000000e+00   \nLegume              0.000000e+00  0.041507  0.929578  2.830544e-03   \nLegume_Tree         0.000000e+00  0.420827  0.925908  3.594671e-09   \nMMT                 3.639509e-06  0.067625  0.997946  9.998547e-01   \nMOT                 7.213385e-02  0.865511  0.837698  3.133404e-04   \nMixed               1.014878e-10  0.013177  0.732883  1.000000e+00   \nNo                  9.991143e-01  1.000000  0.000008  1.338263e-12   \nNot_available       9.999734e-01  0.999707  0.999941  8.940954e-01   \nRye                 0.000000e+00  0.047272  0.989050  8.794790e-02   \n\n                          Legume   Legume_Tree       MMT       MOT  \\\nAVG                 9.914251e-01  9.999977e-01  0.995393  0.994401   \nBrassica            8.280944e-02  1.000000e+00  0.896230  0.999009   \nBroadleaf           9.999988e-01  9.579748e-01  0.999959  0.822669   \nBroadleaf/Brassica  9.965080e-01  9.415894e-01  0.999600  0.863131   \nGrass               0.000000e+00  0.000000e+00  0.000004  0.072134   \nLB                  4.150723e-02  4.208271e-01  0.067625  0.865511   \nLG                  9.295775e-01  9.259076e-01  0.997946  0.837698   \nLL                  2.830544e-03  3.594671e-09  0.999855  0.000313   \nLegume              1.000000e+00  3.533503e-05  1.000000  0.138615   \nLegume_Tree         3.533503e-05  1.000000e+00  0.783375  0.999671   \nMMT                 9.999997e-01  7.833750e-01  1.000000  0.559461   \nMOT                 1.386146e-01  9.996710e-01  0.559461  1.000000   \nMixed               9.775771e-01  1.116075e-01  1.000000  0.093704   \nNo                  6.815660e-09  2.673565e-04  0.000094  0.136925   \nNot_available       9.982850e-01  9.999999e-01  0.994113  1.000000   \nRye                 1.000000e+00  2.737549e-02  1.000000  0.221306   \n\n                           Mixed            No  Not_available           Rye  \nAVG                 7.711579e-01  1.220596e-03       0.999994  9.954867e-01  \nBrassica            2.441072e-01  3.778758e-04       1.000000  3.426549e-01  \nBroadleaf           9.561657e-01  3.522957e-05       0.999805  9.999994e-01  \nBroadleaf/Brassica  9.999677e-01  1.932501e-01       0.935627  9.968716e-01  \nGrass               1.014878e-10  9.991143e-01       0.999973  0.000000e+00  \nLB                  1.317682e-02  1.000000e+00       0.999707  4.727169e-02  \nLG                  7.328834e-01  7.693323e-06       0.999941  9.890498e-01  \nLL                  1.000000e+00  1.338263e-12       0.894095  8.794790e-02  \nLegume              9.775771e-01  6.815660e-09       0.998285  1.000000e+00  \nLegume_Tree         1.116075e-01  2.673565e-04       1.000000  2.737549e-02  \nMMT                 9.999999e-01  9.397006e-05       0.994113  9.999999e-01  \nMOT                 9.370393e-02  1.369253e-01       1.000000  2.213062e-01  \nMixed               1.000000e+00  5.304018e-07       0.958706  9.897287e-01  \nNo                  5.304018e-07  1.000000e+00       0.998104  5.266005e-08  \nNot_available       9.587062e-01  9.981035e-01       1.000000  9.982664e-01  \nRye                 9.897287e-01  5.266005e-08       0.998266  1.000000e+00  \n\n\n\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Load your Excel file\nfile_path = \"SoilHealthDB_V2.xlsx\"\nexcel_file = pd.ExcelFile(file_path)\nmain_df = excel_file.parse(\"Sheet1\")\n\n# Prepare the subset DataFrame with required columns\ncolumns_of_interest = [\n    'CoverCropGroup', 'SoilBD', 'SoilpH', 'CEC', 'BackgroundSOC', 'MBN_T'\n]\nsubset_df = main_df[columns_of_interest].copy()\nsubset_df.rename(columns={'BackgroundSOC': 'SOC'}, inplace=True)\n\n# Define soil indicators to plot\nindicators = ['SoilBD', 'SoilpH', 'CEC', 'SOC', 'MBN_T']\n\n# Set up the subplot grid\nfig, axes = plt.subplots(nrows=2, ncols=3, figsize=(18, 12))\naxes = axes.flatten()\n\n# Loop through each indicator and create a boxplot\nfor i, indicator in enumerate(indicators):\n    # Drop missing values for this indicator\n    data = subset_df[['CoverCropGroup', indicator]].dropna()\n\n    # Check if there's enough data to plot\n    if data['CoverCropGroup'].nunique() &gt; 1 and len(data) &gt; 0:\n        sns.boxplot(data=data, x='CoverCropGroup', y=indicator, ax=axes[i])\n        axes[i].set_title(f'{indicator} by Cover Crop Group')\n        axes[i].tick_params(axis='x', rotation=45)\n    else:\n        axes[i].set_visible(False)\n\n# Hide any remaining unused subplots\nif len(indicators) &lt; len(axes):\n    for j in range(len(indicators), len(axes)):\n        fig.delaxes(axes[j])\n\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n\n\nBoxplots by Country\n\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Load Excel file\nfile_path = \"SoilHealthDB_V2.xlsx\"\nexcel_file = pd.ExcelFile(file_path)\nmain_df = excel_file.parse(\"Sheet1\")\n\n# Rename BackgroundSOC to SOC for clarity\nmain_df = main_df.copy()\nmain_df.rename(columns={'BackgroundSOC': 'SOC'}, inplace=True)\n\n# Define indicators to plot\nindicators = ['SoilBD', 'SoilpH', 'CEC', 'SOC', 'MBN_T']\n\n# Set up the subplot grid (2 rows, 3 columns)\nfig, axes = plt.subplots(nrows=2, ncols=3, figsize=(18, 12))\naxes = axes.flatten()\n\n# Generate boxplots for each soil indicator grouped by Country\nfor i, indicator in enumerate(indicators):\n    data = main_df[['Country', indicator]].dropna()\n\n    if data['Country'].nunique() &gt; 1 and len(data) &gt; 0:\n        sns.boxplot(data=data, x='Country', y=indicator, ax=axes[i])\n        axes[i].set_title(f'{indicator} by Country')\n        axes[i].tick_params(axis='x', rotation=90)\n    else:\n        axes[i].set_visible(False)\n\n# Remove unused subplots if necessary\nif len(indicators) &lt; len(axes):\n    for j in range(len(indicators), len(axes)):\n        fig.delaxes(axes[j])\n\nplt.tight_layout()\nplt.show()"
  }
]